/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 03.11.2024 15:01:28

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1616;
#else
constexpr int kTensorArenaSize = 592;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,30 } };
const ALIGN(16) float tensor_data1[20] = { 0.39962169528007507, -0.30003154277801514, 0.36734965443611145, 0.012148273177444935, -0.41351914405822754, 0, -0.023963835090398788, -0.3359101414680481, -0.059932775795459747, -0.013245782814919949, -0.13568216562271118, -0.091949358582496643, -0.26881834864616394, 0.11758872866630554, 0.0015910695074126124, -0.25649335980415344, -0.32488799095153809, 0.03438776358962059, 0.27487501502037048, -0.11133506149053574, };
const TfArray<1, int> tensor_dimension1 = { 1, { 20 } };
const ALIGN(16) float tensor_data2[40] = { 0.10486271232366562, -0.13093310594558716, 0.22801733016967773, 0.043587807565927505, 0.37641051411628723, 0.024940244853496552, -0.30948472023010254, 0, 0.11769635230302811, -0.27196770906448364, -0.21733720600605011, 0.31028565764427185, -0.295411616563797, 0.057252392172813416, -0.16997480392456055, -0.10689546912908554, 0.16111566126346588, -0.020774193108081818, -0.04483317956328392, 0.10480895638465881, 0.19728031754493713, -0.12133820354938507, 0.35408824682235718, -0.018973110243678093, 0.01899397186934948, 0.15597938001155853, -0.12785811722278595, 0.44674432277679443, -0.17586120963096619, -0.15348190069198608, 0.018188349902629852, 0.17558886110782623, -0.088854134082794189, -0.0085550472140312195, 0.025315802544355392, -0.049942877143621445, 0.047895617783069611, -0.01193239726126194, 0.31811994314193726, 0.042058065533638, };
const TfArray<1, int> tensor_dimension2 = { 1, { 40 } };
const ALIGN(16) float tensor_data3[4] = { 0.29865798354148865, -0.038432776927947998, -0.38342028856277466, 0.16697974503040314, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) float tensor_data4[40*30] = { 
  -0.069877482950687408, -0.093533091247081757, 0.046275746077299118, 0.14024856686592102, 0.10862298309803009, -0.084662921726703644, -0.27536842226982117, -0.058638729155063629, 0.10008224099874496, -0.1179131492972374, 0.2762797474861145, 0.2243167906999588, -0.23504383862018585, -0.14982683956623077, -0.17274230718612671, 0.36441710591316223, 0.088426545262336731, -0.10010895133018494, -0.02110559493303299, 0.11373606324195862, 0.312419593334198, -0.37846353650093079, -0.24758443236351013, -0.012810155749320984, -0.092592932283878326, 0.034992773085832596, 0.097199097275733948, -0.13901658356189728, 0.31953254342079163, 0.34297084808349609, 
  -0.24191181361675262, 0.25237804651260376, -0.15906664729118347, 0.057567436248064041, 0.13151611387729645, -0.15074686706066132, 0.14678582549095154, 0.13949371874332428, 0.18838261067867279, 0.24633242189884186, -0.10555209964513779, 0.26150819659233093, 0.085103809833526611, -0.043864984065294266, -0.076939992606639862, -0.036573674529790878, 0.31281170248985291, 0.18394939601421356, -0.25105538964271545, 0.047502286732196808, -0.25514701008796692, 0.36150515079498291, 0.16557829082012177, 0.18155820667743683, -0.014703548513352871, -0.039315894246101379, 0.058595091104507446, -0.074355803430080414, -0.28284186124801636, 0.23270970582962036, 
  0.1699008047580719, -0.19565793871879578, 0.15741032361984253, 0.17571970820426941, 0.22597508132457733, -0.204451784491539, -0.20801126956939697, -0.12329067289829254, 0.076640233397483826, -0.0049762311391532421, 0.34359386563301086, 0.23645490407943726, 0.02587994746863842, 0.24741797149181366, -0.19789613783359528, -0.058983214199542999, 0.22358253598213196, 0.021884974092245102, -0.27247399091720581, 0.12630189955234528, 0.055372767150402069, -0.20712077617645264, 0.28324225544929504, -0.1712241917848587, 0.084516189992427826, 0.46857526898384094, -0.062646687030792236, 0.11788732558488846, 0.014625823125243187, 0.0045113195665180683, 
  -0.26698258519172668, -0.15202569961547852, -0.058674376457929611, -0.019360873848199844, 0.083907485008239746, 0.17102743685245514, 0.12139406800270081, 0.074937880039215088, -0.22230285406112671, 0.075309514999389648, -0.16110394895076752, -0.19946347177028656, 0.20290859043598175, -0.25255990028381348, 0.22995693981647491, -0.056978330016136169, 0.15079373121261597, 0.12536551058292389, 0.30133605003356934, 0.099392272531986237, -0.09467170387506485, -0.1128050908446312, 0.069856405258178711, 0.011338190175592899, 0.19855514168739319, -0.48707973957061768, -0.016528084874153137, 0.14933356642723083, -0.27514022588729858, -0.13433745503425598, 
  0.16823990643024445, 0.02203352190554142, -0.28477257490158081, 0.29201322793960571, -0.14776827394962311, -0.13740898668766022, -0.11977179348468781, -0.32138881087303162, 0.059022519737482071, -0.15232065320014954, 0.024233384057879448, -0.06460253894329071, -0.053937196731567383, 0.18832477927207947, -0.28426918387413025, 0.23988097906112671, 0.27457007765769958, -0.0036258776672184467, -0.11725578457117081, 0.039407145231962204, -0.16827259957790375, -0.30462539196014404, 0.18869966268539429, 0.22122165560722351, -0.04399944469332695, 0.22171869874000549, -0.24327230453491211, -0.022394027560949326, 0.17550863325595856, 0.24176061153411865, 
  -0.052821125835180283, 0.054531414061784744, -0.13698375225067139, 0.0077839805744588375, -0.10820898413658142, -0.21542859077453613, -0.32471048831939697, 0.07468453049659729, -0.2669374942779541, -0.068453222513198853, -0.22884185612201691, 0.038248222321271896, 0.21028086543083191, 0.086443185806274414, -0.15819789469242096, -0.0083841858431696892, 0.32300755381584167, 0.048885293304920197, 0.12491802871227264, 0.031602300703525543, 0.22902595996856689, -0.072869531810283661, 0.19721823930740356, -0.26536735892295837, -0.055962692946195602, 0.61816138029098511, 0.12547165155410767, 0.060512430965900421, 0.045129969716072083, 0.10657129436731339, 
  0.15267837047576904, -0.11657623946666718, -0.24348042905330658, -0.099352940917015076, -0.077373608946800232, -0.041941065341234207, 0.00061421311693266034, 0.092704646289348602, -0.064217261970043182, 0.3196847140789032, -0.094932973384857178, -0.14259470999240875, -0.099228538572788239, 0.30323591828346252, 0.26139894127845764, 0.011846659705042839, -0.049250207841396332, -0.26939079165458679, -0.20588156580924988, -0.16782380640506744, -0.13301223516464233, -0.12803292274475098, -0.27625077962875366, 0.36543214321136475, 0.048263620585203171, -0.47988075017929077, -0.29878365993499756, 0.13488835096359253, 0.11353497952222824, 0.25509020686149597, 
  0.21292024850845337, 0.081249862909317017, 0.25058668851852417, 0.07834547758102417, -0.093263670802116394, -0.063148587942123413, -0.10351580381393433, -0.19005337357521057, -0.09699876606464386, -0.19646704196929932, 0.23799663782119751, -0.15534783899784088, -0.066030561923980713, -0.081122830510139465, -0.27495625615119934, 0.062562674283981323, 0.060576468706130981, -0.10587650537490845, -0.05210740864276886, 0.19666695594787598, -0.052639082074165344, 0.29120892286300659, 0.10007569193840027, 0.058837771415710449, -0.1719939112663269, -0.19899952411651611, -0.054715409874916077, -0.092334121465682983, -0.25135716795921326, 0.19006490707397461, 
  0.11031144112348557, 0.14275690913200378, -0.22462670505046844, -0.0015474465908482671, -0.059143699705600739, 0.080236829817295074, 0.073844611644744873, 0.092047691345214844, 0.14924974739551544, 0.32418212294578552, 0.18270620703697205, 0.178946852684021, 0.23311683535575867, 0.18272481858730316, 0.25782492756843567, 0.30625760555267334, -0.13390704989433289, -0.27824831008911133, -0.25767242908477783, -0.15989027917385101, 0.1258872002363205, -0.31366607546806335, -0.38610327243804932, -0.10129932314157486, -0.14734722673892975, -0.43667790293693542, 0.37908634543418884, 0.23689913749694824, -0.049597617238759995, -0.10364739596843719, 
  -0.20159997045993805, -0.26439547538757324, -0.17914789915084839, -0.28967654705047607, -0.14524105191230774, -0.21147768199443817, -0.26867517828941345, -0.19707465171813965, 0.002601234707981348, 0.22657410800457001, -0.09949994832277298, 0.038770396262407303, 0.29483738541603088, -0.0048362608067691326, 0.0017524398863315582, -0.16779963672161102, -0.25251072645187378, 0.083581969141960144, 0.17769637703895569, -0.037841718643903732, 0.22084151208400726, -0.23551963269710541, -0.32837691903114319, 0.21567162871360779, 0.27247396111488342, -0.15881170332431793, -0.24644504487514496, -0.1432269960641861, 0.16805016994476318, -0.24477890133857727, 
  0.29554328322410583, 0.17489756643772125, -0.35080790519714355, 0.15192928910255432, -0.035388041287660599, -0.10939234495162964, 0.083197526633739471, 0.12101883441209793, -0.015225376933813095, 0.098432108759880066, -0.33774116635322571, -0.22037117183208466, 0.18494158983230591, -0.13473246991634369, 0.20454324781894684, -0.51633381843566895, -0.14720307290554047, 0.3048950731754303, -0.10033613443374634, -0.27816611528396606, 0.020200418308377266, 0.13646942377090454, 0.070138044655323029, 0.006845944095402956, 0.15328872203826904, 0.066419631242752075, -0.097953714430332184, 0.12313830107450485, -0.14683715999126434, 0.10511837899684906, 
  -0.087755560874938965, 0.23062984645366669, -0.2297065258026123, 0.32717946171760559, 0.20539166033267975, 0.16252872347831726, 0.12417352944612503, -0.1227162778377533, -0.14644509553909302, 0.23672494292259216, 0.052216995507478714, 0.35014748573303223, 0.083647109568119049, 0.16819140315055847, 0.24661557376384735, 0.13038367033004761, -0.075143910944461823, 0.11322450637817383, -0.16861602663993835, 0.1114531084895134, 0.18803860247135162, 0.20335294306278229, -0.064957320690155029, 0.080369867384433746, -0.22821319103240967, -0.22368434071540833, 0.056709785014390945, 0.32165861129760742, 0.16247639060020447, 0.038887549191713333, 
  -0.13054250180721283, -0.0083920396864414215, 0.11871080845594406, -0.15834072232246399, -0.16673614084720612, -0.018278058618307114, 0.045025810599327087, -0.070583052933216095, 0.10366427898406982, 0.31150227785110474, 0.10354320704936981, -0.19132070243358612, 0.11487600207328796, 0.09240075945854187, 0.29258337616920471, -0.37205752730369568, -0.22765608131885529, 0.19307041168212891, 0.26536840200424194, -0.24404264986515045, -0.20538318157196045, -0.19089856743812561, -0.10748957097530365, 0.3300015926361084, 0.010339376516640186, 0.3673451840877533, -0.41052061319351196, -0.23792584240436554, -0.065004043281078339, 0.07348344475030899, 
  0.052084080874919891, -0.24809660017490387, 0.4015556275844574, -0.20157232880592346, 0.095049627125263214, 0.05977722629904747, 0.16599577665328979, 0.029170781373977661, -0.2773546576499939, -0.18423484265804291, -0.32764542102813721, -0.044599276036024094, -0.036832671612501144, -0.14316974580287933, -0.016242237761616707, 0.2259964644908905, -0.14743220806121826, 0.15162061154842377, 0.16713787615299225, 0.27487930655479431, 0.2161872386932373, 0.42637801170349121, 0.38452887535095215, -0.10132606327533722, 0.20478852093219757, 0.41328269243240356, -0.19709226489067078, 0.20463027060031891, 0.0025147781707346439, 0.09892851859331131, 
  0.28551805019378662, -0.18040072917938232, 0.037091687321662903, -0.12911641597747803, 0.18975274264812469, 0.31254503130912781, -0.28525397181510925, -0.1849437803030014, -0.20638100802898407, 0.2360861748456955, 0.09939102828502655, -0.13250955939292908, -0.32778498530387878, -0.0094005074352025986, 0.24065795540809631, 0.15736506879329681, -0.1214386522769928, -0.058485589921474457, -0.2363847941160202, 0.21831503510475159, -0.2029968798160553, -0.11864033341407776, 0.051433764398097992, -0.17369668185710907, -0.35049837827682495, 0.071164488792419434, 0.1265072226524353, -0.33177658915519714, 0.22405828535556793, 0.21014329791069031, 
  0.027259420603513718, -0.20473912358283997, -0.32972544431686401, -0.051617641001939774, 0.11167453974485397, 0.004585733637213707, -0.18788310885429382, 0.10549607872962952, 0.059915769845247269, 0.11482998728752136, -0.27314820885658264, -0.16711194813251495, 0.065139956772327423, -0.11173518747091293, -0.066615767776966095, -0.021042568609118462, -0.12274669110774994, 0.012809038162231445, 0.048589020967483521, 0.11666665226221085, 0.031226227059960365, 0.17976474761962891, 0.29207530617713928, -0.29144296050071716, -0.24934026598930359, 0.14652518928050995, 0.13621847331523895, 0.036034829914569855, 0.2950274646282196, -0.17486980557441711, 
  -0.053227398544549942, -0.15613928437232971, 0.27754691243171692, -0.039945103228092194, 0.17692132294178009, -0.075632728636264801, 0.074025847017765045, -5.5878339480841532e-05, -0.24493461847305298, 0.13807928562164307, -0.29855608940124512, 0.12387675046920776, 0.11074253171682358, -0.057379133999347687, -0.22699639201164246, 0.012514959089457989, 0.21294566988945007, 0.067884668707847595, 0.13283589482307434, -0.077969267964363098, 0.089560858905315399, 0.13751105964183807, 0.22082628309726715, 0.22060687839984894, -0.02637883648276329, 0.23606398701667786, -0.23641471564769745, -0.053899914026260376, 0.06939658522605896, 0.28995120525360107, 
  -0.023374995216727257, 0.31024932861328125, 0.21544086933135986, -0.15185032784938812, 0.043943710625171661, -0.092467539012432098, -0.10692682862281799, -0.18598310649394989, -0.19241541624069214, 0.27829879522323608, 0.15036796033382416, -0.21656572818756104, -0.17958496510982513, -0.14335921406745911, -0.017809977754950523, -0.10064543783664703, -0.0025897235609591007, 0.056656032800674438, 0.30487769842147827, 0.23219022154808044, -0.26518172025680542, 0.28705084323883057, 0.081590019166469574, 0.030953982844948769, -0.21451191604137421, -0.14822767674922943, 0.24174477159976959, 0.08396507054567337, 0.23678290843963623, -0.04308222234249115, 
  -0.20121492445468903, 0.20289745926856995, 0.17539802193641663, -0.23395766317844391, -0.057422701269388199, -0.21989572048187256, -0.21505141258239746, -0.18714447319507599, -0.010154279880225658, -0.18195788562297821, -0.14390082657337189, -0.15670071542263031, -0.15543650090694427, -0.016605041921138763, -0.26576358079910278, 0.075702108442783356, -0.16871635615825653, 0.25365740060806274, 0.056609626859426498, -0.24768683314323425, -0.17144133150577545, -0.13110329210758209, -0.025127969682216644, 0.25214478373527527, -0.26998907327651978, 0.012676631100475788, 0.15676206350326538, 0.14991192519664764, -0.2179284393787384, -0.10867556929588318, 
  -0.11164721101522446, -0.01271293219178915, -0.19163037836551666, 0.17726241052150726, 0.16703423857688904, -0.12769028544425964, 0.30237469077110291, -0.01214910950511694, 0.026303596794605255, -0.20064090192317963, -0.11344585567712784, 0.27215716242790222, -0.049015883356332779, -0.21776936948299408, 0.057986635714769363, -0.24986653029918671, 0.27277085185050964, -0.0091581447049975395, -0.30373281240463257, -0.017633482813835144, -0.1913447380065918, 0.12303797900676727, -0.056659281253814697, -0.3112461268901825, -0.069540567696094513, 0.11129133403301239, -0.20592306554317474, 0.11163004487752914, 0.11742580682039261, -0.23231770098209381, 
  -0.075519628822803497, 0.24909080564975739, 0.20196539163589478, -0.16532130539417267, -0.27657386660575867, 0.097798086702823639, -0.19121682643890381, 0.26879581809043884, 0.19234521687030792, -0.14996613562107086, -0.020946942269802094, 0.081499606370925903, 0.1947321742773056, -0.19879668951034546, -0.30980268120765686, 0.32498627901077271, -0.17868140339851379, 0.14776083827018738, 0.15380226075649261, -0.22436247766017914, 0.21170341968536377, -0.081371381878852844, 0.18425716459751129, 0.18087758123874664, -0.27024799585342407, -0.36301964521408081, -0.051784269511699677, 0.17065063118934631, 0.16772767901420593, 0.11844662576913834, 
  -0.030738027766346931, 0.023687882348895073, 0.04043099656701088, 0.10977385938167572, 0.33767017722129822, 0.037539802491664886, -0.042718857526779175, -0.17127832770347595, 0.17610359191894531, -0.11157418787479401, -0.10280247777700424, -0.046985574066638947, 0.14693635702133179, 0.29509955644607544, -0.15630827844142914, 0.055501691997051239, 0.28631258010864258, -0.010707186535000801, 0.035482689738273621, -0.092593535780906677, -0.28295907378196716, 0.29090169072151184, 0.19193780422210693, -0.17751012742519379, 0.021138822659850121, 0.22064708173274994, -0.22673112154006958, -0.32528960704803467, 0.3437456488609314, -0.1226222962141037, 
  -0.099239788949489594, -0.24103136360645294, -0.061040565371513367, 0.29426214098930359, -0.010965512134134769, 0.048660948872566223, 0.080735169351100922, 0.25618663430213928, 0.15725141763687134, 0.12822256982326508, -0.24273069202899933, -0.24075272679328918, -0.020999277010560036, 0.17182056605815887, -0.21213285624980927, 0.40018275380134583, -0.21472232043743134, -0.003733556717634201, -0.020141785964369774, -0.22314858436584473, 0.25229185819625854, -0.011588647961616516, 0.074652276933193207, -0.25895687937736511, -0.092643372714519501, 0.05828440934419632, -0.018930390477180481, -0.21031790971755981, 0.0067399358376860619, -0.12271428108215332, 
  0.1513068825006485, 0.17622390389442444, 0.18321555852890015, 0.28413966298103333, -0.20794166624546051, 0.24716995656490326, 0.17778047919273376, -0.027444567531347275, -0.11828285455703735, 0.21444295346736908, 0.065180309116840363, -0.11006662249565125, 0.13019555807113647, 0.20254974067211151, 0.20528772473335266, 0.11450457572937012, -0.017267322167754173, 0.12339285016059875, -0.25750812888145447, 0.19941641390323639, 0.033046253025531769, 0.26161336898803711, -0.073475509881973267, -0.18049189448356628, 0.13755172491073608, 0.24775442481040955, -0.30896398425102234, -0.27501937747001648, -0.25104328989982605, -0.0083833737298846245, 
  0.047525230795145035, -0.17951725423336029, -0.19860507547855377, -0.054657977074384689, 0.21178433299064636, 0.081822045147418976, -0.12465924024581909, 0.18329732120037079, 0.18601281940937042, -0.054051730781793594, 0.27455061674118042, -0.05454225093126297, 0.014442012645304203, 0.25381141901016235, -0.19718296825885773, -0.3280264139175415, -0.14754320681095123, -0.060815457254648209, -0.24995981156826019, 0.15048585832118988, -0.13020266592502594, -0.033348120748996735, 0.042832918465137482, 0.19052886962890625, 0.20914265513420105, 0.46396949887275696, -0.14268042147159576, 0.21771860122680664, 0.27915093302726746, 0.21243378520011902, 
  0.21296437084674835, -0.035176429897546768, -0.17969527840614319, 0.28740355372428894, 0.029292099177837372, -0.11924209445714951, 0.17439261078834534, -0.015653112903237343, 0.059024728834629059, -0.01323399692773819, -0.11728765815496445, -0.12300350517034531, -0.028717666864395142, -0.09627862274646759, 0.24309493601322174, 0.26470369100570679, -0.23503901064395905, -0.3016095757484436, -0.17571476101875305, 0.28401455283164978, 0.38145691156387329, -0.18511283397674561, -0.53739410638809204, -0.20599702000617981, 0.17729687690734863, -0.39916974306106567, -0.054085101932287216, 0.26463991403579712, -0.099363528192043304, -0.036454636603593826, 
  -0.060911830514669418, -0.22313776612281799, -0.25743016600608826, 0.20914958417415619, 0.083583682775497437, -0.067163094878196716, 0.12629273533821106, -0.088118337094783783, -0.13439227640628815, 0.23891016840934753, 0.050071381032466888, 0.15911281108856201, 0.027039842680096626, -0.20933885872364044, 0.11935022473335266, -0.11010949313640594, -0.10765781253576279, 0.076913066208362579, 0.12140268087387085, 0.313556969165802, 0.29106184840202332, -0.033380389213562012, -0.46394702792167664, -0.15662349760532379, -0.062202174216508865, -0.00079484458547085524, 0.21569125354290009, 0.031307701021432877, 0.20757481455802917, -0.12369369715452194, 
  -0.37837454676628113, 0.19753803312778473, 0.10983696579933167, 0.19163131713867188, 0.26157951354980469, 0.23233802616596222, 0.077779039740562439, -0.25227749347686768, -0.21285900473594666, 0.22172164916992188, -0.14108613133430481, -0.02339504100382328, 0.27686199545860291, 0.08353317528963089, -0.054523710161447525, 0.4614776074886322, -0.26759931445121765, -0.14795213937759399, 0.093986250460147858, -0.090567067265510559, -0.063669338822364807, 0.25644919276237488, 0.12491579353809357, -0.23247863352298737, 0.16435320675373077, 0.13917079567909241, 0.049713112413883209, -0.12745247781276703, 0.15983852744102478, -0.33176347613334656, 
  0.26574662327766418, -0.074837982654571533, 0.046094559133052826, -0.17192979156970978, -0.071202650666236877, 0.051368966698646545, -0.12098401784896851, -0.14080840349197388, -0.13119451701641083, 0.063908204436302185, 0.14682672917842865, 0.11612871289253235, 0.27460035681724548, 0.0086385812610387802, -0.17119273543357849, -0.1598374992609024, 0.15634846687316895, -0.068028755486011505, 0.15801122784614563, -0.049553424119949341, -0.33100289106369019, -0.040139354765415192, -0.06536371260881424, -0.089138582348823547, 0.029016429558396339, -0.34851419925689697, -0.013710718601942062, -0.0091182617470622063, -0.017485801130533218, -0.26414874196052551, 
  0.20043151080608368, -0.0067364205606281757, 0.34044414758682251, -0.039478324353694916, -0.23376072943210602, -0.21345034241676331, -0.075035437941551208, 0.19584010541439056, 0.18361151218414307, -0.17644369602203369, 0.16134591400623322, 0.25921368598937988, 0.20540280640125275, 0.11886971443891525, 0.1474003940820694, -0.086487986147403717, 0.027908088639378548, 0.13305683434009552, 0.25553467869758606, 0.079995028674602509, -0.038600854575634003, 0.022973652929067612, -0.26599383354187012, 0.18053920567035675, -0.17500565946102142, 0.3953268826007843, -0.37624150514602661, 0.11441446840763092, 0.13388738036155701, 0.1964668482542038, 
  0.069414436817169189, -0.23351077735424042, -0.088043332099914551, 0.036465775221586227, 0.058129630982875824, 0.096735194325447083, -0.18178695440292358, -0.23157073557376862, -0.04576447606086731, 0.012274889275431633, 0.18127410113811493, 0.26673504710197449, -0.094044208526611328, -0.11911222338676453, 0.15522301197052002, -0.24362578988075256, 0.056010067462921143, 0.25849589705467224, -0.31180292367935181, -0.0013295897515490651, -0.24093516170978546, -0.067953474819660187, 0.30847489833831787, -0.27772563695907593, 0.10907422751188278, -0.0044405017979443073, -0.060701716691255569, 0.2119700014591217, -0.094668999314308167, -0.024220051243901253, 
  0.05214235931634903, -0.064960114657878876, -0.27285134792327881, -0.089011624455451965, -0.085338488221168518, 0.31069666147232056, 0.2775370180606842, 0.14329378306865692, -0.13600076735019684, -0.019926328212022781, 0.0049169226549565792, 0.020127817988395691, 0.11160501092672348, 0.15418842434883118, 0.10664613544940948, -0.10174901038408279, -0.12392853945493698, 0.026642585173249245, 0.11045268923044205, 0.17113932967185974, 0.046570353209972382, -0.024953378364443779, 0.068510614335536957, 0.14730238914489746, -0.0092851016670465469, 0.39471727609634399, 0.069090180099010468, 0.16503441333770752, -0.032294627279043198, -0.22658595442771912, 
  -0.29290607571601868, -0.11947742104530334, -0.23461335897445679, -0.26126471161842346, 0.15397071838378906, -0.2292117178440094, 0.080198734998703003, 0.23511260747909546, -0.035683911293745041, -0.022295346483588219, 0.083609215915203094, 0.10978533327579498, -0.18192233145236969, -0.20199553668498993, -0.083782844245433807, 0.13470779359340668, 0.20378129184246063, 0.14634247124195099, -0.18889991939067841, -0.1613021045923233, 0.064690075814723969, -0.24582770466804504, -0.28026884794235229, 0.17861004173755646, 0.30385324358940125, -0.33211949467658997, 0.14407578110694885, -0.2630946934223175, 0.023699777200818062, 0.087772242724895477, 
  -0.30183872580528259, -0.034376505762338638, 0.2222563624382019, 0.27790555357933044, 0.050723526626825333, 0.11176092177629471, 0.01270209439098835, -0.11135191470384598, 0.050458751618862152, -0.020407132804393768, -0.23651657998561859, -0.065099090337753296, -0.30243599414825439, 0.2244097888469696, -0.0022616754285991192, -0.24799548089504242, -0.41272366046905518, 0.047447547316551208, 0.048232398927211761, -0.0011649542720988393, 0.37734276056289673, -0.27546906471252441, -0.2515825629234314, 0.18416787683963776, 0.19783218204975128, -0.13165554404258728, -0.18086040019989014, -0.063906848430633545, 0.23048244416713715, -0.012891029939055443, 
  -0.29864174127578735, -0.074953697621822357, -0.34762659668922424, 0.16468358039855957, 0.21859736740589142, -0.16820716857910156, 0.35704559087753296, -0.014470813795924187, 0.095358431339263916, -0.18275079131126404, 0.36814764142036438, 0.27134779095649719, -0.1085268035531044, -0.10664805769920349, 0.0013276359532028437, -0.036285404115915298, 0.25879144668579102, -0.11043234914541245, 0.096306368708610535, -0.25014069676399231, -0.083873182535171509, 0.21605777740478516, 0.24544627964496613, -0.14994062483310699, -0.098053433001041412, -0.029110133647918701, -0.22738289833068848, -0.15090391039848328, 0.092696793377399445, -0.029144657775759697, 
  0.29640361666679382, -0.33672001957893372, 0.16487431526184082, 0.034897178411483765, 0.20335462689399719, -0.012153222225606441, 0.22667153179645538, 0.18562458455562592, 0.072858549654483795, 0.12410561740398407, 0.21879526972770691, 0.18661206960678101, -0.0041132383048534393, -0.088633894920349121, -0.1707020103931427, -0.21729424595832825, 0.19853015244007111, 0.0088200028985738754, -0.3264448344707489, 0.18608148396015167, -0.076117999851703644, -0.096060767769813538, -0.16118326783180237, -0.17985095083713531, 0.09081529825925827, 0.18839798867702484, 0.25383830070495605, -0.25705185532569885, 0.1022125631570816, 0.21748358011245728, 
  -0.16699297726154327, -0.0053533986210823059, -0.10653611272573471, -0.22256524860858917, -0.24174092710018158, -0.089686430990695953, 0.16531684994697571, 0.17375734448432922, -0.13205532729625702, -0.06841905415058136, -0.24357543885707855, -0.17076490819454193, -0.10748419910669327, 0.2545740008354187, 0.24149523675441742, 0.20671834051609039, -0.14760047197341919, -0.056304793804883957, -0.20280064642429352, 0.030883228406310081, -0.20309352874755859, 0.36913233995437622, -0.11312758922576904, -0.34595614671707153, -0.18793913722038269, 0.45097929239273071, -0.048073291778564453, -0.3761732280254364, -0.2121107429265976, -0.36102640628814697, 
  0.15523411333560944, 0.21693101525306702, -0.077897444367408752, 0.23050262033939362, -0.044777672737836838, 0.27137526869773865, 0.19409121572971344, -0.10818419605493546, 0.064323306083679199, -0.1654658168554306, -0.13494288921356201, 0.27375075221061707, -0.23616941273212433, 0.08216424286365509, -0.17576895654201508, -0.22509089112281799, 0.082406818866729736, 0.27833029627799988, -0.16447773575782776, -0.25303441286087036, -0.074571952223777771, -0.07934848964214325, -0.19906333088874817, 0.26575705409049988, 0.13222683966159821, -0.16015784442424774, 0.1609991192817688, -0.22481736540794373, -0.26144936680793762, -0.14582610130310059, 
  -0.15116883814334869, -0.33792290091514587, 0.057573936879634857, 0.035537626594305038, -0.095537088811397552, -0.29806104302406311, -0.23073707520961761, -0.1519901305437088, -0.16082283854484558, 0.097422599792480469, 0.2672419548034668, 0.11476069688796997, -0.19224198162555695, -0.084317319095134735, -0.17019303143024445, 0.087233148515224457, -0.39089268445968628, 0.29249465465545654, -0.1166650727391243, 0.016874533146619797, 0.17583373188972473, -0.025052785873413086, -0.19570519030094147, 0.13401475548744202, -0.19191211462020874, -0.38792470097541809, -0.1385379433631897, -0.030325811356306076, -0.18670223653316498, 0.21339285373687744, 
  0.25388461351394653, -0.073639892041683197, -0.027143673971295357, -0.087326362729072571, 0.13538411259651184, 0.20347656309604645, 0.048170141875743866, -0.24907641112804413, -0.34666910767555237, -0.02806696854531765, -0.2756551206111908, -0.24482665956020355, -0.027970651164650917, -0.14548715949058533, 0.21031804382801056, 0.27437511086463928, -0.035554472357034683, 0.099067032337188721, -0.034839853644371033, -0.13986556231975555, -0.34109792113304138, 0.20337946712970734, -0.25214415788650513, 0.029326412826776505, -0.035115670412778854, 0.36368536949157715, 0.2148941308259964, -0.17503181099891663, -0.34132319688796997, 0.14325268566608429, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 40,30 } };
const ALIGN(16) float tensor_data5[20*40] = { 
  0.073227360844612122, -0.13815887272357941, 0.27694216370582581, 0.31645408272743225, 0.062913216650485992, 0.12840422987937927, 0.10508020967245102, 0.14692163467407227, 0.029083419591188431, -0.19982513785362244, 0.23072376847267151, 0.25332632660865784, -0.30453073978424072, 0.14728158712387085, -0.19190806150436401, 0.18304777145385742, -0.26721405982971191, 0.19793599843978882, -0.12187840044498444, 0.2890569269657135, 0.17903350293636322, -0.084789127111434937, -0.010859894566237926, 0.034975245594978333, -0.032966427505016327, -0.22283381223678589, -0.02743220143020153, 0.037017915397882462, -0.041333165019750595, -0.23860405385494232, 0.23079480230808258, -0.040308590978384018, -0.045831676572561264, -0.097143165767192841, -0.035014942288398743, -0.019388115033507347, 0.27742025256156921, 0.24399372935295105, 0.1721300482749939, -0.052131958305835724, 
  -0.016518615186214447, 0.18870602548122406, 0.14658057689666748, -0.14199607074260712, -0.19632066786289215, -0.12609721720218658, 0.22233955562114716, 0.18918821215629578, -0.17120763659477234, -0.1399717777967453, 0.04592118039727211, -0.26654726266860962, 0.29638546705245972, -0.026079891249537468, -0.23215647041797638, 0.30325984954833984, 0.023172499611973763, 0.1515180915594101, -0.0744890496134758, -0.022641930729150772, 0.049122113734483719, 0.072163373231887817, -0.23686075210571289, 0.27527621388435364, 0.28611668944358826, -0.32662397623062134, -0.18878057599067688, 0.036563701927661896, 0.0054905880242586136, 0.16642090678215027, 0.034911017864942551, 0.21036769449710846, 0.18306325376033783, 0.22682733833789825, 0.33214715123176575, -0.29710403084754944, 0.3521932065486908, 0.065569460391998291, -0.29714140295982361, -0.057277340441942215, 
  -0.087544530630111694, 0.047847170382738113, -0.086946330964565277, -0.058737132698297501, 0.014917061664164066, 0.17175509035587311, -0.098944015800952911, -0.035701751708984375, 0.24904072284698486, -0.25804683566093445, -0.13842928409576416, 0.029285650700330734, 0.31893801689147949, -0.080916307866573334, -0.046162169426679611, 0.051681838929653168, -0.062897093594074249, -0.030082283541560173, -0.1357361227273941, -0.49989435076713562, 0.26676344871520996, 0.28810358047485352, 0.27379941940307617, -0.32948505878448486, 0.29242762923240662, -0.15126274526119232, 0.2400992214679718, 0.26622265577316284, -0.16750222444534302, 0.18103492259979248, -0.22122165560722351, 0.26389068365097046, -0.062384646385908127, 0.32591024041175842, -0.3443305492401123, -0.17781096696853638, 0.079143352806568146, 0.23366612195968628, -0.03845832496881485, 0.034527558833360672, 
  0.1516944020986557, 0.25640341639518738, -0.17535072565078735, -0.16148495674133301, -0.081856295466423035, 0.26373228430747986, -0.21425513923168182, -0.011590868234634399, -0.067749634385108948, 0.28559026122093201, 0.29119309782981873, -0.18549156188964844, 0.081260107457637787, 0.038354910910129547, -0.050533905625343323, 0.18490086495876312, 0.16106909513473511, 0.089544549584388733, -0.24600030481815338, 0.12867191433906555, -0.21077604591846466, -0.013682203367352486, -0.25122293829917908, 0.022040495648980141, -0.23548512160778046, 0.17642246186733246, -0.1075129508972168, -0.22256986796855927, -0.13004004955291748, -0.14316149055957794, -0.1579979807138443, 0.044186405837535858, -0.23760281503200531, -0.051739227026700974, -0.10851021111011505, -0.22181351482868195, -0.13688604533672333, -0.20331956446170807, -0.29610991477966309, -0.13485784828662872, 
  -0.06882130354642868, -0.2841152548789978, -0.19760796427726746, -0.10231639444828033, -0.2843359112739563, 0.21816141903400421, 0.023549146950244904, 0.066942095756530762, -0.14096243679523468, 0.22575591504573822, -0.25753042101860046, 0.13984306156635284, -0.04882199689745903, 0.06667771190404892, 0.29272592067718506, 0.13003653287887573, -0.19662784039974213, 0.1682407557964325, -0.1484215259552002, -0.11588514596223831, -0.15110389888286591, 0.36083641648292542, -0.085359863936901093, -0.01454128697514534, 0.31143710017204285, -0.098210699856281281, 0.20592741668224335, 0.044771403074264526, -0.045639127492904663, 0.07883579283952713, -0.19949069619178772, -0.26634278893470764, -0.13574422895908356, -0.20946244895458221, 0.061153948307037354, 0.33114516735076904, -0.036176774650812149, 0.27765664458274841, 0.21405673027038574, 0.20415033400058746, 
  -0.23741993308067322, -0.18808367848396301, -0.082357645034790039, -0.018224000930786133, -0.31474798917770386, 0.20994767546653748, -0.137592613697052, -0.064968794584274292, -0.099662661552429199, -0.18353550136089325, -0.30833983421325684, 0.17433720827102661, -0.08820207417011261, -0.022953718900680542, 0.050168991088867188, -0.29894596338272095, 0.015265524387359619, 0.13887453079223633, -0.2160092294216156, 0.047990679740905762, 0.2491595447063446, -0.21027471125125885, -0.26659250259399414, -0.26578155159950256, -0.13318149745464325, 0.22867384552955627, -0.11008739471435547, 0.24315664172172546, 0.14649790525436401, 0.089594930410385132, 0.31583330035209656, -0.27013769745826721, 0.14030763506889343, 0.1209108829498291, 0.18063196539878845, -0.076447233557701111, 0.14696693420410156, 0.12203192710876465, 0.15754804015159607, -0.12006713449954987, 
  0.2527509331703186, -0.17877197265625, 0.19239106774330139, 0.022872617468237877, 0.031601082533597946, 0.18063093721866608, -0.18056902289390564, 0.024658858776092529, 0.16737288236618042, -0.048490211367607117, -0.043189577758312225, -0.016991524025797844, 0.17576794326305389, -0.33427691459655762, -0.30595609545707703, -0.17048491537570953, -0.14155112206935883, 0.14209115505218506, 0.011816010810434818, 0.25567993521690369, -0.1030069962143898, -0.10742269456386566, -0.12130140513181686, 0.072814047336578369, -0.21289448440074921, 0.24189995229244232, 0.25938785076141357, -0.022612228989601135, -0.33409562706947327, -0.11631334573030472, -0.014887397177517414, -0.23137204349040985, 0.11547461152076721, 0.27843785285949707, -0.22409904003143311, 0.16362106800079346, 0.046889100223779678, -0.23150400817394257, 0.088295884430408478, 0.15090455114841461, 
  -0.012037007138133049, 0.085819445550441742, -0.044531069695949554, 0.23701915144920349, 0.36384865641593933, -0.1712484210729599, 0.24988062679767609, -0.27065378427505493, 0.18766634166240692, 0.048651695251464844, 0.079970166087150574, -0.19205667078495026, 0.22019384801387787, -0.076031036674976349, -0.28094902634620667, -0.10839793831110001, 0.23081734776496887, -0.26386824250221252, 0.070756323635578156, 0.23090089857578278, 0.1882120817899704, 0.23434028029441833, -0.19853535294532776, -0.11652296781539917, 0.19053769111633301, -0.27793961763381958, -0.10696057975292206, -0.22241348028182983, 0.19922980666160583, -0.24217173457145691, 0.25269752740859985, 0.31778618693351746, -0.33690342307090759, -0.14872512221336365, 0.058867461979389191, -0.23921559751033783, -0.17308893799781799, 0.12104231119155884, -0.28195869922637939, 0.0032448081765323877, 
  0.025162914767861366, 0.16976995766162872, 0.26827028393745422, -0.27862697839736938, -0.080740123987197876, 0.27755147218704224, 0.0060626976191997528, -0.092878356575965881, -0.26348274946212769, -0.17244860529899597, 0.078573212027549744, 0.10070110857486725, 0.26730865240097046, 0.42023831605911255, 0.015809323638677597, -0.12267290055751801, 0.29038271307945251, -0.36732476949691772, -0.0012936601415276527, -0.26435708999633789, -0.38622555136680603, 0.034431677311658859, 0.19505327939987183, 0.2229265421628952, 0.18893079459667206, -0.0018970007076859474, -0.12146478146314621, -0.015260633081197739, -0.097427293658256531, 0.083692595362663269, 0.33386516571044922, 0.089154750108718872, -0.31694552302360535, 0.051594384014606476, 0.23966275155544281, 0.37334731221199036, 0.34116077423095703, 0.023566115647554398, -0.33940514922142029, -0.07341378927230835, 
  0.11383722722530365, -0.056764151901006699, 0.20285682380199432, -0.065578728914260864, 0.19616855680942535, -0.17718008160591125, -0.21643359959125519, 0.1516362726688385, -0.056546039879322052, -0.0073500592261552811, 0.2894233763217926, -0.26859411597251892, 0.097863592207431793, -0.13971632719039917, 0.078292869031429291, 0.12293113768100739, -0.089476063847541809, -0.25970634818077087, -0.014730901457369328, -0.095596253871917725, 0.28823858499526978, 0.0011285769287496805, -0.31419029831886292, -0.057216238230466843, -0.059672694653272629, -0.021081317216157913, 0.25332117080688477, 0.030382920056581497, -0.25944045186042786, -0.28223639726638794, 0.096341267228126526, 0.21881535649299622, -0.13946385681629181, -0.32180547714233398, -0.24596983194351196, -0.31438851356506348, 0.16564412415027618, 0.11175903677940369, -0.22942543029785156, 0.058543972671031952, 
  -0.33621525764465332, 0.10562510043382645, 0.079178787767887115, -0.30140846967697144, -0.22966195642948151, -1.6610720194876194e-05, 0.27288460731506348, -0.22335129976272583, -0.0092441802844405174, 0.015640061348676682, -0.32200887799263, 0.15352492034435272, 0.049359150230884552, 0.39398908615112305, 0.19510811567306519, 0.17543895542621613, -0.14013543725013733, -0.26377636194229126, -0.030195318162441254, -0.023700207471847534, 0.0025847770739346743, 0.11781225353479385, -0.28633621335029602, 0.1352679431438446, 0.20043860375881195, -0.28081536293029785, 0.31359419226646423, -0.21281607449054718, -0.05435001477599144, 0.2375628650188446, -0.19835104048252106, 0.13501670956611633, 0.13296829164028168, 0.15844857692718506, 0.15988829731941223, 0.12914775311946869, 0.26768451929092407, -0.23544876277446747, 0.026301132515072823, -0.14239440858364105, 
  -0.25629770755767822, 0.19295139610767365, -0.27723300457000732, -0.30415239930152893, 0.014754517935216427, -0.16669882833957672, 0.071744561195373535, 0.24257984757423401, 0.051850561052560806, -0.25954008102416992, -0.12986604869365692, 0.1118432953953743, 0.090657629072666168, -0.18020962178707123, -0.12322361767292023, -0.050765182822942734, -0.42532753944396973, -0.043404132127761841, 0.14119669795036316, -0.030572682619094849, 0.27555245161056519, 0.078211754560470581, -0.0082952305674552917, -0.14046628773212433, 0.098447546362876892, 0.11645425111055374, -0.069669678807258606, 0.053456965833902359, 0.069363832473754883, -0.26114940643310547, -0.023171612992882729, 0.13726690411567688, 0.0030580093152821064, -0.00073771533789113164, 0.13901178538799286, -0.079630479216575623, -0.0029482669197022915, -0.17353996634483337, 0.091203078627586365, -0.25817432999610901, 
  -0.16186754405498505, 0.24963995814323425, -0.16971930861473083, 0.032066375017166138, -0.10750675201416016, 0.15250182151794434, -0.21450152993202209, -0.18856137990951538, -0.33256885409355164, -0.23561674356460571, 0.19949319958686829, -0.16627945005893707, -0.15402507781982422, 0.30196815729141235, 0.20144394040107727, 0.18618546426296234, 0.35674938559532166, 0.30196836590766907, 0.095192424952983856, 0.26179668307304382, -0.30759796500205994, 0.35952630639076233, 0.1429080069065094, -0.20939050614833832, 0.032999500632286072, -0.19251434504985809, 0.29886987805366516, 0.063538461923599243, 0.087980456650257111, -0.093387104570865631, -0.22305415570735931, 0.13930398225784302, -0.0091839944943785667, 0.2476312667131424, 0.27333715558052063, 0.055377393960952759, -0.063149571418762207, -0.19539374113082886, -0.16235411167144775, -0.27662664651870728, 
  -0.15079273283481598, 0.058596484363079071, 0.23684483766555786, -0.097965463995933533, 0.2012932151556015, 0.16566258668899536, -0.27260103821754456, -0.1213565319776535, -0.16892287135124207, 0.18328040838241577, 0.2445872575044632, -0.053533673286437988, -0.26667383313179016, 0.22149056196212769, 0.095670983195304871, 0.28004273772239685, 0.38839969038963318, -0.091492407023906708, 0.14627113938331604, -0.33801811933517456, -0.027660276740789413, 0.014527951367199421, 0.16095101833343506, 0.2554965615272522, 0.015949662774801254, -0.083626970648765564, -0.027911154553294182, 0.2671629786491394, -0.36720201373100281, 0.12865111231803894, 0.27181586623191833, -0.19520388543605804, -0.26423677802085876, -0.13367156684398651, 0.37661322951316833, -0.023114662617444992, 0.060139395296573639, -0.045538663864135742, 0.023027839139103889, 0.36604690551757812, 
  0.35125294327735901, -0.14745266735553741, 0.18537110090255737, 0.076530411839485168, 0.18482992053031921, 0.13834016025066376, 0.14762738347053528, -0.25719183683395386, 0.29721969366073608, 0.21464230120182037, -0.030107229948043823, -0.24892430007457733, -0.17108362913131714, -0.060847662389278412, -0.13037993013858795, 0.15513114631175995, -0.1363198310136795, 0.31790450215339661, -0.18315860629081726, -0.14405611157417297, -0.083586595952510834, -0.075745388865470886, -0.26121959090232849, 0.13280139863491058, 0.056132294237613678, 0.061556834727525711, 0.062221970409154892, 0.19975146651268005, 0.21636377274990082, -0.036851584911346436, 0.053886860609054565, 0.29064902663230896, -0.1610247790813446, 0.36982813477516174, -0.35833549499511719, 0.043140970170497894, -0.070281453430652618, -0.1492990255355835, 0.31809383630752563, -0.082385480403900146, 
  0.35096427798271179, 0.10228319466114044, -0.30558019876480103, 0.20092575252056122, -0.15907448530197144, 0.12240680307149887, 0.22162549197673798, -0.18316523730754852, 0.19540831446647644, 0.068490378558635712, 0.23952756822109222, -0.046585213392972946, 0.14677469432353973, -0.074655190110206604, -0.13873936235904694, 0.20931977033615112, -0.36725211143493652, 0.27287262678146362, 0.13594676554203033, 0.23307761549949646, -0.11203160881996155, -0.054501701146364212, 0.2279408872127533, -0.19975817203521729, -0.0071083614602684975, 0.059809502214193344, 0.25640037655830383, -0.29482445120811462, 0.14093300700187683, 0.12822011113166809, 0.16987906396389008, -0.20862950384616852, 0.23690931499004364, 0.30012959241867065, -0.17533199489116669, -0.32553613185882568, 0.072316132485866547, 0.23130279779434204, -0.14463192224502563, -0.23833727836608887, 
  0.12681861221790314, -0.20160649716854095, 0.2483164370059967, -0.11969006061553955, 0.0058066942729055882, 0.17744384706020355, -0.007058268878608942, -0.047773838043212891, -0.067245908081531525, -0.018632702529430389, -0.062902741134166718, -0.28461587429046631, 0.11606217920780182, 0.14562150835990906, 0.31574031710624695, 0.14827489852905273, -0.18006639182567596, 0.047494795173406601, 0.04266488179564476, -0.36392897367477417, 0.32240450382232666, 0.12168729305267334, 0.0083802174776792526, 0.13654391467571259, -0.25528568029403687, -0.018815016373991966, 0.17969654500484467, -0.19421249628067017, -0.29184478521347046, 0.32332903146743774, -0.13982214033603668, -0.17186239361763, 0.20216035842895508, 0.03546779602766037, -0.36214497685432434, 0.03460712730884552, 0.092251069843769073, 0.038618594408035278, 0.041268587112426758, -0.36129721999168396, 
  0.26060035824775696, 0.14694727957248688, 0.23707966506481171, -0.3241247832775116, -0.10374679416418076, 0.2580128014087677, -0.11124461889266968, 0.13500681519508362, -0.025971380993723869, 0.19054751098155975, 0.12415822595357895, -0.17584599554538727, 0.22677560150623322, 0.53967535495758057, -0.14909546077251434, -0.05432269349694252, -0.17459499835968018, -0.22219854593276978, 0.25201645493507385, -0.052220962941646576, 0.14200812578201294, -0.092640586197376251, -0.23139582574367523, -0.20650622248649597, -0.14417675137519836, -0.27868017554283142, -0.21570034325122833, -0.34184935688972473, -0.032800674438476562, 0.15564584732055664, -0.15438711643218994, 0.21380990743637085, 0.092505902051925659, -0.068591706454753876, 0.3590686023235321, 0.20519226789474487, -0.28992730379104614, 0.0042196214199066162, -0.21382042765617371, 0.15310724079608917, 
  0.10423815250396729, 0.11061719805002213, 0.058317370712757111, -0.074103489518165588, 0.030472731217741966, 0.068157613277435303, -0.3288729190826416, 0.2585044801235199, 0.21712853014469147, -0.099304884672164917, -0.27473044395446777, 0.27028024196624756, -0.23622514307498932, -0.45296216011047363, -0.17535702884197235, 0.29286560416221619, -0.1167263388633728, -0.24907132983207703, 0.27464139461517334, 0.44696733355522156, -0.087232910096645355, -0.21058279275894165, 0.069263890385627747, 0.23715613782405853, 0.20789574086666107, 0.3047243058681488, -0.27008762955665588, 0.21228429675102234, 0.22281758487224579, 0.21496619284152985, 0.23878589272499084, 0.059281855821609497, -0.25234565138816833, 0.22461920976638794, 0.12265533953905106, -0.022364642471075058, -0.14454327523708344, 0.33048662543296814, 0.25708577036857605, 0.15005187690258026, 
  0.030805053189396858, -0.043268062174320221, 0.21936559677124023, 0.024704745039343834, -0.28797075152397156, 0.13678646087646484, -0.0985603928565979, -0.050696223974227905, 0.26101323962211609, 0.24736347794532776, -0.26670902967453003, 0.01531349029392004, -0.17047159373760223, -0.096330702304840088, -0.15141601860523224, -0.18644456565380096, -0.18679778277873993, 0.26062840223312378, -0.084144160151481628, 0.36254236102104187, 0.18161220848560333, -0.34190410375595093, 0.20064370334148407, 0.34305781126022339, -0.047974240034818649, 0.026022125035524368, 0.064646780490875244, 0.23390859365463257, -0.12789063155651093, 0.23030062019824982, -0.19085898995399475, 0.26532250642776489, 0.13323928415775299, -0.0041627860628068447, 0.042724840342998505, 0.096733659505844116, 0.076096661388874054, 0.30713272094726562, -0.12525765597820282, -0.025164803490042686, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 20,40 } };
const ALIGN(16) float tensor_data6[4*20] = { 
  0.41585308313369751, 0.25040653347969055, 0.50500363111495972, -0.19217701256275177, 0.0051665594801306725, -0.40351247787475586, -0.48573803901672363, -0.12905868887901306, 0.54524600505828857, 0.22241954505443573, 0.16796979308128357, -0.23357188701629639, -0.15528956055641174, 0.49179470539093018, 0.029216066002845764, -0.45157083868980408, -0.37127307057380676, 0.21340827643871307, -0.34103497862815857, 0.015519103035330772, 
  0.25118863582611084, -0.12215428799390793, -0.5008888840675354, -0.4760327935218811, -0.48224771022796631, -0.38776051998138428, 0.02769862674176693, 0.096761979162693024, -0.21269716322422028, 0.048581384122371674, 0.34770941734313965, 0.12822479009628296, 0.29528635740280151, -0.11827107518911362, 0.079318910837173462, 0.2001500129699707, 0.060217168182134628, 0.07012166827917099, 0.11767740547657013, 0.45839294791221619, 
  -0.40945813059806824, 0.51717787981033325, -0.32921949028968811, -0.40193921327590942, 0.40417912602424622, -0.39264094829559326, 0.38925272226333618, 0.38377970457077026, 0.30582591891288757, -0.28311407566070557, 0.36186084151268005, 0.37629017233848572, 0.065575703978538513, 0.05272519588470459, 0.18729923665523529, 0.38766399025917053, 0.68304175138473511, -0.16804596781730652, -0.61419522762298584, 0.22384542226791382, 
  -0.025746997445821762, -0.16534136235713959, 0.036148998886346817, 0.21705640852451324, 0.13312548398971558, -0.21745455265045166, 0.43523672223091125, -0.23014414310455322, -0.49952232837677002, -0.46064147353172302, -0.24832449853420258, 0.074646279215812683, -0.57484692335128784, -0.29730850458145142, 0.44927132129669189, 0.51770502328872681, 0.039185907691717148, -0.39151385426521301, -0.3401494026184082, 0.52233409881591797, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 4,20 } };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,40 } };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,20 } };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,4 } };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,4 } };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,4,2 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,5,1 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,6,3 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 160), (TfLiteIntArray*)&g0::tensor_dimension0, 120, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 80, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 160, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 16, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 4800, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3200, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 320, },
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension7, 160, },
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 160), (TfLiteIntArray*)&g0::tensor_dimension8, 80, },
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 16), (TfLiteIntArray*)&g0::tensor_dimension9, 16, },
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension10, 16, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 11, };
const size_t tflNodes_subgraph_index[] = {0, 4, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  10, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = kTfLiteFloat32;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization.type = kTfLiteNoQuantization;

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = kTfLiteFloat32;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_18_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_18_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_18_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_18_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_18_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}

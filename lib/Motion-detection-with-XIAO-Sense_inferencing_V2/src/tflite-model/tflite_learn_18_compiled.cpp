/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 11.11.2024 12:16:49

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1616;
#else
constexpr int kTensorArenaSize = 592;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,30 } };
const ALIGN(16) float tensor_data1[20] = { 0.39432543516159058, -0.27596300840377808, 0.12060884386301041, -0.51302856206893921, -0.3804837167263031, 0.28187069296836853, 0.32729771733283997, 0.12212429940700531, 0.18269594013690948, 0.51653903722763062, -0.18263702094554901, -0.051644284278154373, -0.21406033635139465, 0.13356874883174896, -0.57818728685379028, -0.06247599795460701, -0.0055343480780720711, -0.030551271513104439, 0.34584575891494751, 0.16827346384525299, };
const TfArray<1, int> tensor_dimension1 = { 1, { 20 } };
const ALIGN(16) float tensor_data2[40] = { 0.16972813010215759, 0.11272943019866943, 0.30391225218772888, 0.27818495035171509, 0.27696028351783752, -0.19639596343040466, -0.46194487810134888, 0, -0.082834362983703613, -0.4267059862613678, 0.092966422438621521, 0.28232455253601074, -0.045557700097560883, -0.16030782461166382, -0.044332459568977356, -0.40797761082649231, 0.1926862895488739, -0.015685843303799629, 0.087202444672584534, 0.16777276992797852, 0.088210940361022949, -0.30005496740341187, 0.49431517720222473, 0.14643941819667816, -0.13437630236148834, 0.48103022575378418, 0.057572085410356522, 0.26692864298820496, 0.13898287713527679, -0.12162384390830994, 0.46897271275520325, -0.23664574325084686, 0.0037615951150655746, -0.36959829926490784, 0.083684399724006653, -0.22710953652858734, -0.093655943870544434, -0.017236044630408287, -0.039165083318948746, 0.39919525384902954, };
const TfArray<1, int> tensor_dimension2 = { 1, { 40 } };
const ALIGN(16) float tensor_data3[5] = { -0.087196223437786102, 0.30966782569885254, -0.050128340721130371, -0.55600672960281372, 0.23248656094074249, };
const TfArray<1, int> tensor_dimension3 = { 1, { 5 } };
const ALIGN(16) float tensor_data4[40*30] = { 
  -0.039917994290590286, -0.09317672997713089, -0.0079401899129152298, 0.10377832502126694, 0.093082748353481293, 0.034588314592838287, -0.17988461256027222, -0.11326757073402405, -0.0088458098471164703, -0.2195466160774231, 0.37464332580566406, 0.39146608114242554, -0.25835013389587402, -0.17732560634613037, -0.26696547865867615, 0.25807568430900574, 0.16460992395877838, -0.16266681253910065, -0.050899870693683624, 0.044697891920804977, 0.053537555038928986, -0.29181411862373352, -0.1751028299331665, 0.015711626037955284, -0.093940146267414093, -0.13403844833374023, 0.026714194566011429, -0.13742831349372864, 0.37495303153991699, 0.3831271231174469, 
  -0.26998859643936157, 0.26596534252166748, -0.10422120243310928, 0.069004617631435394, 0.064032040536403656, -0.1887999027967453, 0.093860700726509094, 0.18979938328266144, 0.19051237404346466, 0.28739657998085022, -0.055493146181106567, 0.23689498007297516, 0.12532460689544678, -0.051109660416841507, -0.08815368264913559, 0.04066162183880806, 0.2607608437538147, 0.22987031936645508, -0.22681882977485657, 0.082554467022418976, -0.097158387303352356, 0.37018090486526489, 0.13109081983566284, 0.13518311083316803, -0.056232873350381851, -0.39236205816268921, 0.002642516978085041, -0.19644112884998322, -0.32482284307479858, 0.1707424521446228, 
  0.20641462504863739, -0.19954553246498108, 0.1254783421754837, 0.14999394118785858, 0.21800631284713745, -0.12883923947811127, -0.20400641858577728, -0.086159504950046539, 0.11690718680620193, 0.031322795897722244, 0.23609749972820282, 0.19826613366603851, -0.001591283711604774, 0.23570020496845245, -0.20017454028129578, 0.084948524832725525, 0.20696435868740082, 0.036538016051054001, -0.1940874457359314, 0.17827557027339935, 0.22216679155826569, -0.17582666873931885, 0.17217151820659637, -0.15403635799884796, 0.068916663527488708, 0.14252287149429321, -0.12925370037555695, 0.21350990235805511, 0.16506120562553406, 0.1264672577381134, 
  -0.28786799311637878, -0.19027283787727356, -0.032862521708011627, 0.007444875780493021, 0.1605939120054245, 0.081371597945690155, 0.082795292139053345, 0.088457144796848297, -0.26271736621856689, 0.10197925567626953, -0.16659396886825562, -0.16056039929389954, 0.24256372451782227, -0.18498821556568146, 0.24889184534549713, -0.2834736704826355, 0.18854309618473053, 0.12111443281173706, 0.25105011463165283, 0.041937399655580521, -0.1849886029958725, -0.076038427650928497, 0.25841572880744934, 0.010248984210193157, 0.20684888958930969, -0.3524869978427887, -0.011631075292825699, 0.01234669703990221, -0.34135326743125916, -0.20369631052017212, 
  0.27866515517234802, 0.059685595333576202, -0.17566372454166412, 0.20516470074653625, -0.14210458099842072, -0.017188955098390579, -0.16131146252155304, -0.32942095398902893, 0.067446060478687286, -0.081651687622070312, -0.054426107555627823, -0.053210660815238953, 0.01183721236884594, 0.27484291791915894, -0.22868598997592926, 0.11216017603874207, 0.28991064429283142, -0.10583130270242691, -0.10899655520915985, 0.018905553966760635, 0.11967795342206955, -0.24360576272010803, 0.15944667160511017, 0.20189327001571655, -0.079517893493175507, 0.1003270298242569, -0.26452973484992981, -0.13543958961963654, 0.20961892604827881, 0.25185731053352356, 
  -0.0029275084380060434, 0.034947071224451065, 0.045092221349477768, -0.022362519055604935, -0.062448956072330475, -0.3181973397731781, -0.21980790793895721, 0.0032542420085519552, -0.29077315330505371, -0.17534573376178741, -0.059012342244386673, 0.091533906757831573, 0.27565592527389526, 0.053502809256315231, -0.14343585073947906, -0.17488400638103485, 0.087528884410858154, 0.031301666051149368, 0.19262500107288361, 0.16386619210243225, 0.38001257181167603, -0.099344618618488312, 0.10960980504751205, -0.21723553538322449, -0.009988715872168541, -0.23605063557624817, 0.11369692534208298, -0.052350815385580063, 0.010072978213429451, 0.068836316466331482, 
  0.12338866293430328, -0.13197322189807892, -0.23886182904243469, -0.074522264301776886, -0.06360887736082077, -0.0039602676406502724, -0.023033913224935532, 0.11214170604944229, -0.037926502525806427, 0.30597680807113647, -0.079919159412384033, -0.11701704561710358, -0.071265906095504761, 0.31163650751113892, 0.2658105194568634, 0.015054401941597462, -0.037268556654453278, -0.24376711249351501, -0.22644157707691193, -0.20722432434558868, -0.14354543387889862, -0.095264077186584473, -0.12551654875278473, 0.36136028170585632, 0.045748103410005569, -0.15575054287910461, -0.27242392301559448, 0.10150379687547684, 0.042152725160121918, 0.19132950901985168, 
  0.21292024850845337, 0.081249862909317017, 0.25058668851852417, 0.07834547758102417, -0.093263670802116394, -0.063148587942123413, -0.10351580381393433, -0.19005337357521057, -0.09699876606464386, -0.19646704196929932, 0.23799663782119751, -0.15534783899784088, -0.066030561923980713, -0.081122830510139465, -0.27495625615119934, 0.062562674283981323, 0.060576468706130981, -0.10587650537490845, -0.05210740864276886, 0.19666695594787598, -0.052639082074165344, 0.29120892286300659, 0.10007569193840027, 0.058837771415710449, -0.1719939112663269, -0.19899952411651611, -0.054715409874916077, -0.092334121465682983, -0.25135716795921326, 0.19006490707397461, 
  0.22167567908763885, 0.2209266871213913, -0.13558229804039001, -0.09428878128528595, -0.044212609529495239, -0.028460836037993431, 0.17675106227397919, 0.027487095445394516, 0.092526920139789581, 0.2677256166934967, 0.20825561881065369, 0.24015615880489349, 0.18906916677951813, 0.1892523467540741, 0.25993320345878601, 0.41783833503723145, 0.17976260185241699, -0.25085633993148804, -0.39776611328125, -0.33808788657188416, -0.012313081882894039, -0.19885589182376862, -0.34739544987678528, -0.16879788041114807, -0.20654332637786865, -0.3035862147808075, 0.31849789619445801, 0.22681082785129547, 0.020146286115050316, -0.020956737920641899, 
  -0.22667630016803741, -0.27225658297538757, -0.20634418725967407, -0.2693655788898468, -0.13205820322036743, -0.16978797316551208, -0.27342811226844788, -0.18715108931064606, 0.035732850432395935, 0.19937659800052643, -0.063702940940856934, 0.063914954662322998, 0.30573666095733643, 0.01135712955147028, 0.0063168988563120365, -0.14288349449634552, -0.18520289659500122, 0.16441164910793304, 0.18652749061584473, -0.063037462532520294, 0.19243545830249786, -0.20982693135738373, -0.12053628265857697, 0.26354154944419861, 0.31320354342460632, 0.041004721075296402, -0.32469406723976135, -0.12485906481742859, 0.22311572730541229, -0.19489298760890961, 
  0.26337006688117981, 0.083342939615249634, -0.20292779803276062, 0.18381616473197937, 0.024272918701171875, -0.37815135717391968, 0.023190611973404884, 0.10873411595821381, 0.00060821301303803921, 0.109701007604599, -0.20943306386470795, -0.25910031795501709, 0.2838330864906311, -0.11508408933877945, 0.21982824802398682, -0.36606201529502869, -0.34792479872703552, 0.27806895971298218, -0.068241015076637268, -0.16877719759941101, 0.25733429193496704, -0.038480907678604126, -0.083023667335510254, 0.070207312703132629, 0.22073434293270111, -0.40298646688461304, -0.048801802098751068, 0.10995426774024963, -0.29664942622184753, -0.007200741209089756, 
  -0.028382088989019394, 0.28105384111404419, -0.19173188507556915, 0.26855224370956421, 0.14101296663284302, 0.14801017940044403, 0.023917114362120628, -0.097938545048236847, -0.070463910698890686, 0.30489557981491089, 0.0072970697656273842, 0.28307914733886719, 0.15525034070014954, 0.17688064277172089, 0.30190116167068481, -0.032596748322248459, -0.14440895617008209, -0.05391911044716835, -0.17986288666725159, 0.10095631331205368, 0.35556849837303162, 0.31230726838111877, -0.19502924382686615, 0.036651939153671265, -0.28618565201759338, -0.11669163405895233, 0.21485820412635803, 0.3623516857624054, 0.1528661698102951, -0.0051589133217930794, 
  -0.14158438146114349, -0.020769897848367691, 0.22885560989379883, -0.16601561009883881, -0.19699932634830475, -0.19850610196590424, 0.042962998151779175, -0.10746865719556808, 0.077375531196594238, 0.26355177164077759, 0.14113797247409821, -0.20419970154762268, 0.12654666602611542, 0.044925481081008911, 0.26546427607536316, -0.27497920393943787, -0.31327530741691589, 0.065656505525112152, 0.19053263962268829, -0.28405603766441345, -0.0045091602951288223, -0.28062674403190613, -0.29677018523216248, 0.34061405062675476, 0.0043811444193124771, -0.00096488936105743051, -0.24343027174472809, -0.25899779796600342, -0.27078601717948914, -0.1149851456284523, 
  0.11292026191949844, -0.19550590217113495, 0.23031264543533325, -0.26224440336227417, -0.016943663358688354, -0.063972339034080505, 0.12569890916347504, -0.1261349618434906, -0.19649879634380341, -0.19015021622180939, -0.20843704044818878, -0.014689484611153603, -0.18030962347984314, -0.19674356281757355, -0.054867379367351532, 0.41333603858947754, -0.22354148328304291, 0.13502313196659088, 0.18812081217765808, 0.31361240148544312, 0.45707559585571289, 0.41952407360076904, 0.33742928504943848, 0.030801758170127869, 0.31861162185668945, 0.088138267397880554, -0.33522683382034302, 0.21921674907207489, 0.14022833108901978, 0.20690000057220459, 
  0.28876739740371704, -0.21301636099815369, 0.10593678057193756, -0.12930172681808472, 0.19791087508201599, 0.25166183710098267, -0.23104482889175415, -0.31265571713447571, -0.23933994770050049, 0.13302458822727203, 0.22073923051357269, -0.17655433714389801, -0.23035849630832672, -0.059105265885591507, 0.25131383538246155, 0.47029152512550354, -0.29287305474281311, -0.053766589611768723, -0.16848592460155487, 0.32223808765411377, 0.038491617888212204, -0.31210297346115112, -0.13212162256240845, -0.14398752152919769, -0.31729620695114136, -0.51168519258499146, -0.11028304696083069, -0.16186082363128662, 0.36488065123558044, 0.36803185939788818, 
  0.00049388676416128874, -0.23023293912410736, -0.29073497653007507, -0.025246070697903633, 0.15729902684688568, 0.055788841098546982, -0.20127247273921967, 0.18375043570995331, 0.12463844567537308, 0.17111611366271973, -0.2961181104183197, -0.24866655468940735, 0.051864270120859146, -0.10320859402418137, -0.049089726060628891, -0.079950183629989624, -0.11423666030168533, 0.14043925702571869, 0.089995913207530975, 0.17028595507144928, -0.014555386267602444, 0.081647776067256927, 0.28072190284729004, -0.22997428476810455, -0.16923607885837555, 0.31649446487426758, 0.081596925854682922, 0.12000710517168045, 0.31785488128662109, -0.11471796780824661, 
  0.0045847459696233273, -0.13111881911754608, 0.418500155210495, -0.076154045760631561, 0.18537126481533051, -0.19882462918758392, 0.084710694849491119, -0.033460605889558792, -0.28953784704208374, 0.12982176244258881, -0.35550528764724731, 0.063812725245952606, 0.13147057592868805, 0.0012265892000868917, -0.20483772456645966, 0.072088122367858887, 0.11836870014667511, 0.071457549929618835, 0.22764012217521667, 0.024720590561628342, 0.069721624255180359, 0.10329627990722656, 0.038633149117231369, 0.20911082625389099, -0.043222036212682724, 0.14050872623920441, -0.22518208622932434, 0.017308641225099564, 0.086880691349506378, 0.3031218945980072, 
  -0.089636743068695068, 0.26138299703598022, 0.21453067660331726, -0.092456571757793427, 0.095680944621562958, -0.19350419938564301, -0.14679370820522308, -0.20288273692131042, -0.14793179929256439, 0.30442178249359131, 0.16324448585510254, -0.20264405012130737, -0.18863877654075623, -0.16225805878639221, -0.040014054626226425, -0.09209684282541275, -0.06555715948343277, 0.064339987933635712, 0.33333310484886169, 0.2760193943977356, -0.32071512937545776, 0.21726369857788086, 0.087917551398277283, 0.064162001013755798, -0.16736772656440735, -0.036681853234767914, 0.29045149683952332, 0.29073530435562134, 0.21758770942687988, -0.041263900697231293, 
  -0.26608607172966003, 0.16207145154476166, 0.064281679689884186, -0.17968633770942688, -0.047776352614164352, -0.21006208658218384, -0.21493487060070038, -0.26840505003929138, -0.028887296095490456, -0.19673679769039154, -0.14003457129001617, -0.13784730434417725, -0.17498156428337097, -0.03540373221039772, -0.28510710597038269, 0.23138342797756195, -0.09609086811542511, 0.31547999382019043, 0.05206666886806488, -0.25426700711250305, -0.038142390549182892, -0.19756834208965302, 0.022329496219754219, 0.3076113760471344, -0.2138737291097641, -0.12552870810031891, 0.17177589237689972, 0.10896109044551849, -0.24286207556724548, -0.14045202732086182, 
  -0.11810662597417831, -0.02964668907225132, -0.22760756313800812, 0.17857523262500763, 0.20915772020816803, -0.16999544203281403, 0.12781533598899841, 0.014705254696309566, -0.08852723240852356, -0.088367372751235962, -0.011505724862217903, 0.26400923728942871, 0.040522750467061996, -0.07288031280040741, 0.11101499199867249, -0.39987796545028687, 0.29538881778717041, 0.05754532665014267, -0.31638357043266296, -0.016259925439953804, -0.23998324573040009, 0.04593924805521965, 0.020056458190083504, -0.26031458377838135, -0.02009623683989048, 0.060572650283575058, -0.41337829828262329, 0.18155674636363983, 0.30724528431892395, -0.055658861994743347, 
  -0.080830387771129608, 0.21173475682735443, 0.10450311750173569, -0.15039101243019104, -0.23476476967334747, 0.050249718129634857, -0.18846321105957031, 0.23987433314323425, 0.16496910154819489, -0.16200935840606689, 0.024019863456487656, 0.14062701165676117, 0.17139531672000885, -0.18379972875118256, -0.31124144792556763, 0.14242205023765564, -0.26348131895065308, 0.10514998435974121, 0.21257169544696808, -0.18746985495090485, 0.1086001992225647, -0.062174823135137558, 0.27457574009895325, 0.25844725966453552, -0.19730545580387115, -0.35019093751907349, -0.10664375871419907, 0.16885322332382202, 0.23863761126995087, 0.18175223469734192, 
  -0.022920120507478714, 0.0085927499458193779, 0.043407808989286423, 0.10993986576795578, 0.33621060848236084, 0.10662662982940674, 0.03291117399930954, -0.12756387889385223, 0.10016351938247681, -0.14064054191112518, 0.026404347270727158, -0.019916336983442307, 0.16430237889289856, 0.25920876860618591, -0.19780291616916656, -0.1142428070306778, 0.25292089581489563, -0.24016019701957703, -0.098973833024501801, -0.20182134211063385, -0.25012704730033875, 0.20311622321605682, -0.054429799318313599, -0.23602715134620667, -0.0088405050337314606, 0.14193433523178101, -0.1940498948097229, -0.33178573846817017, 0.21671952307224274, -0.20065107941627502, 
  -0.064285926520824432, -0.19300991296768188, -0.10726991295814514, 0.24703015387058258, -0.069772280752658844, -0.084781557321548462, 0.16784128546714783, 0.19197255373001099, 0.089439623057842255, 0.095089048147201538, -0.15299415588378906, -0.19445686042308807, -0.043884791433811188, 0.10067827999591827, -0.25837954878807068, 0.23470161855220795, -0.24676930904388428, -0.2092909961938858, -0.10535989701747894, -0.2719416618347168, 0.12106001377105713, -0.094705179333686829, -0.17751428484916687, -0.29413166642189026, -0.11111323535442352, -0.092955291271209717, 0.22963842749595642, -0.2489183247089386, -0.14851002395153046, -0.25538569688796997, 
  0.13432443141937256, 0.13047924637794495, 0.12681737542152405, 0.30633234977722168, -0.20102210342884064, 0.31474578380584717, 0.20022217929363251, -0.046599894762039185, -0.10132687538862228, 0.18298041820526123, 0.069756574928760529, -0.15751974284648895, 0.08698929101228714, 0.1661532074213028, 0.19152310490608215, 0.41387838125228882, -0.012963860295712948, 0.20538844168186188, -0.19279634952545166, 0.2342565655708313, -0.041701700538396835, 0.33288201689720154, -0.41227945685386658, -0.33502256870269775, -0.027151577174663544, 0.36975225806236267, -0.13760554790496826, -0.12948569655418396, -0.22167429327964783, -0.0374889075756073, 
  0.066304251551628113, -0.1574675440788269, -0.21993957459926605, -0.074278391897678375, 0.17489871382713318, 0.15325605869293213, -0.11404907703399658, 0.18826605379581451, 0.17722827196121216, -0.047953210771083832, 0.24416254460811615, -0.050697624683380127, -0.017029633745551109, 0.21516464650630951, -0.23540879786014557, -0.30984312295913696, -0.14634767174720764, -0.11503347009420395, -0.26706591248512268, 0.14511384069919586, -0.17803195118904114, -0.076021082699298859, -0.17632649838924408, 0.13379804790019989, 0.16091567277908325, 0.55834692716598511, -0.083273626863956451, 0.23826025426387787, 0.22807209193706512, 0.16947905719280243, 
  0.20687004923820496, -0.0004096665361430496, -0.24810627102851868, 0.27945581078529358, -0.013027028180658817, -0.13230183720588684, 0.13764446973800659, 0.0097696809098124504, 0.073250889778137207, 0.016127299517393112, -0.14750099182128906, -0.13098667562007904, -0.054597318172454834, -0.074577242136001587, 0.26985600590705872, 0.16441306471824646, -0.22591632604598999, -0.26483345031738281, -0.15592342615127563, 0.27525356411933899, 0.23298892378807068, -0.09174007922410965, -0.38518348336219788, -0.21337151527404785, 0.1564304381608963, -0.23241759836673737, -0.073448427021503448, 0.2593456506729126, -0.0090404646471142769, 0.02031400054693222, 
  -0.095770150423049927, -0.19849884510040283, -0.26502516865730286, 0.22042325139045715, 0.051219470798969269, -0.15805163979530334, 0.13041628897190094, -0.1148030087351799, -0.081292144954204559, 0.20684708654880524, 0.047670993953943253, 0.18543760478496552, 0.0083904135972261429, -0.27178135514259338, 0.09403584897518158, -0.2625407874584198, -0.17348678410053253, 0.062964692711830139, 0.10907936096191406, 0.31357967853546143, 0.22102327644824982, -0.038112647831439972, -0.32145887613296509, -0.14536570012569427, -0.044557802379131317, -0.086850710213184357, 0.19744938611984253, 0.014808889478445053, 0.17541465163230896, -0.12691155076026917, 
  -0.27415168285369873, 0.27569574117660522, 0.12344317883253098, 0.11074712872505188, 0.24649780988693237, 0.22976520657539368, 0.015901388600468636, -0.20800329744815826, -0.16359338164329529, 0.35625654458999634, -0.26562750339508057, -0.043912675231695175, 0.23758886754512787, 0.05880868062376976, -0.0514979287981987, 0.33859255909919739, -0.21432115137577057, -0.25719532370567322, 0.083621524274349213, -0.11486133188009262, -0.11228019744157791, 0.27357137203216553, 0.060034219175577164, -0.23928211629390717, 0.17133073508739471, 0.16317836940288544, -0.035531215369701385, -0.15901093184947968, 0.26867237687110901, -0.22380822896957397, 
  0.25867953896522522, -0.1300148069858551, 0.10609275847673416, -0.13639754056930542, 0.023526666685938835, 0.1884428858757019, -0.054789680987596512, 0.0023579483386129141, -0.15174457430839539, 0.098398774862289429, 0.36714854836463928, 0.27240979671478271, 0.096552975475788116, -0.035929031670093536, -0.37127920985221863, -0.18002600967884064, -0.027994068339467049, 0.088397830724716187, 0.40007287263870239, 0.13743454217910767, -0.33042442798614502, -0.065802894532680511, 0.08695472776889801, -0.030245112255215645, 0.052292775362730026, -0.55047518014907837, -0.30714866518974304, -0.13635274767875671, 0.20147019624710083, -0.15204595029354095, 
  0.18752382695674896, 0.029903585091233253, 0.22395943105220795, -0.05910809338092804, -0.34602108597755432, -0.18147562444210052, 0.0067635169252753258, 0.19833602011203766, 0.11626504361629486, -0.23510132730007172, 0.15882925689220428, 0.3278423547744751, 0.15723335742950439, 0.040603362023830414, 0.087402880191802979, -0.1559298038482666, 0.03037739172577858, 0.048683781176805496, 0.17015664279460907, -0.0018577794544398785, 0.10793540626764297, 0.096387565135955811, -0.28576555848121643, 0.11270745098590851, -0.22517329454421997, 0.32104834914207458, -0.21917060017585754, -0.022988870739936829, -0.038940653204917908, 0.023803466930985451, 
  0.033074244856834412, -0.26713046431541443, -0.10259615629911423, 0.062485404312610626, 0.065468668937683105, 0.089412510395050049, -0.22247754037380219, -0.10579679161310196, -0.058042105287313461, 0.087292008101940155, 0.20624251663684845, 0.2469344437122345, -0.051535904407501221, -0.058349180966615677, 0.17420019209384918, -0.30034622550010681, -0.055533982813358307, 0.22710280120372772, -0.24257786571979523, 0.039668038487434387, -0.13293638825416565, -0.13495734333992004, 0.17247813940048218, -0.27803277969360352, 0.099031105637550354, -0.20465995371341705, -0.0048452643677592278, 0.22709661722183228, -0.12219399958848953, -0.076834015548229218, 
  0.10627926886081696, -0.062553592026233673, -0.30905032157897949, -0.12138736993074417, -0.078252077102661133, 0.31051433086395264, 0.262886643409729, 0.090870574116706848, -0.11640579253435135, -0.011867445893585682, -0.13184350728988647, -0.013150075450539589, 0.0783843994140625, 0.16086705029010773, 0.12109595537185669, 0.055139053612947464, 0.010111331008374691, 0.049662768840789795, 0.094002299010753632, 0.14297580718994141, 0.0057110544294118881, -0.0024200892075896263, -0.04476378858089447, 0.11460062861442566, -0.045139212161302567, 0.46320447325706482, 0.03986687958240509, 0.13897044956684113, 0.00071200297679752111, -0.1869625598192215, 
  -0.3210313618183136, -0.11606027185916901, -0.25578659772872925, -0.24913573265075684, 0.14312906563282013, -0.33121985197067261, 0.13266380131244659, 0.21262004971504211, -0.028521943837404251, -0.075768284499645233, 0.068883337080478668, 0.13417629897594452, -0.12545247375965118, -0.198557049036026, -0.050453159958124161, 0.089056268334388733, 0.13812676072120667, 0.14209417998790741, -0.1577436774969101, -0.12834110856056213, -0.1494579017162323, -0.23506614565849304, -0.1385270357131958, 0.24596324563026428, 0.36838656663894653, -0.49425491690635681, 0.098723910748958588, -0.30613642930984497, 0.03141200914978981, 0.086987249553203583, 
  -0.27679681777954102, 0.012057602405548096, 0.24002543091773987, 0.25581696629524231, 0.042490262538194656, 0.028264442458748817, 0.012274484150111675, -0.20321688055992126, 0.070432335138320923, -0.045965798199176788, -0.16747832298278809, -0.047904770821332932, -0.35213083028793335, 0.21921698749065399, -0.011442295275628567, -0.3375886082649231, -0.31209483742713928, 0.088906697928905487, 0.00079455925151705742, -0.040853917598724365, 0.11811142414808273, -0.12840089201927185, -0.1796850711107254, 0.094653435051441193, 0.12005370855331421, 0.14858201146125793, -0.17027951776981354, -0.11390748620033264, 0.21086247265338898, -0.017790991812944412, 
  -0.2979729175567627, 0.024427628144621849, -0.30022284388542175, 0.14519545435905457, 0.077055282890796661, -0.1544889360666275, 0.258402019739151, -0.0046932706609368324, -0.0034373519010841846, -0.13672462105751038, 0.40126004815101624, 0.29772770404815674, -0.16194747388362885, -0.14255321025848389, -0.10430711507797241, -0.053392037749290466, 0.29259222745895386, -0.11721879243850708, 0.032381661236286163, -0.31778070330619812, 0.19245585799217224, 0.30382943153381348, 0.05551808699965477, -0.32173299789428711, -0.27356651425361633, 0.14979866147041321, -0.17494660615921021, -0.20560862123966217, 0.034494839608669281, -0.086473584175109863, 
  0.22279079258441925, -0.30266073346138, -0.1036975234746933, 0.070460684597492218, 0.096759356558322906, 0.26777029037475586, 0.15729993581771851, 0.25516137480735779, 0.21313256025314331, 0.16130492091178894, 0.11892491579055786, 0.01031989511102438, -0.058389320969581604, -0.14972878992557526, -0.13620132207870483, 0.054717037826776505, 0.09231114387512207, 0.044002525508403778, -0.23781126737594604, 0.27642357349395752, -0.15578101575374603, -0.13968586921691895, -0.33452481031417847, -0.19257336854934692, 0.087121523916721344, 0.16023412346839905, 0.1966588944196701, 0.087875612080097198, 0.29894241690635681, 0.41575402021408081, 
  -0.1964782327413559, -0.067564792931079865, -0.063784681260585785, -0.1956154853105545, -0.20841203629970551, -0.070004530251026154, 0.17689405381679535, 0.1221519261598587, -0.085456214845180511, -0.10132609307765961, -0.11919696629047394, -0.20037342607975006, -0.071509234607219696, 0.26033422350883484, 0.2479158341884613, 0.11807729303836823, -0.2142711728811264, -0.17936994135379791, -0.22761313617229462, 0.0068057808093726635, -0.079932764172554016, 0.12577308714389801, -0.46942973136901855, -0.2709229588508606, -0.14571358263492584, -0.30348381400108337, -0.27651485800743103, -0.18889828026294708, 0.0098757687956094742, -0.12583009898662567, 
  0.16044759750366211, 0.22216007113456726, -0.072708010673522949, 0.22528895735740662, -0.051644925028085709, 0.26338469982147217, 0.18565773963928223, -0.11578076332807541, 0.056322086602449417, -0.16877983510494232, -0.14095224440097809, 0.26830899715423584, -0.24344253540039062, 0.07615392655134201, -0.18548727035522461, -0.22612839937210083, 0.086431011557579041, 0.27536919713020325, -0.16832010447978973, -0.25633901357650757, -0.069527275860309601, -0.072800591588020325, -0.18286880850791931, 0.25976970791816711, 0.12485139816999435, -0.16687636077404022, 0.16452169418334961, -0.22310554981231689, -0.26761716604232788, -0.15627345442771912, 
  -0.049530405551195145, -0.25146141648292542, 0.017913714051246643, -0.052959423512220383, -0.13999560475349426, -0.28654724359512329, -0.2182483971118927, -0.27544164657592773, -0.13778427243232727, 0.081130184233188629, 0.070324279367923737, 0.16779594123363495, -0.27400565147399902, -0.10957454144954681, -0.15612417459487915, -0.20003709197044373, -0.37214082479476929, 0.30918172001838684, -0.051433760672807693, 0.034188747406005859, 0.17494773864746094, 0.18657281994819641, -0.024223450571298599, 0.069877348840236664, -0.26733008027076721, -0.41175705194473267, -0.27928540110588074, -0.16992001235485077, -0.082527138292789459, 0.31046384572982788, 
  0.16079407930374146, -0.13194277882575989, -0.13718748092651367, 0.0024695813190191984, 0.17990592122077942, 0.21225082874298096, -0.066807486116886139, -0.13783293962478638, -0.30084532499313354, 0.10153597593307495, -0.40815895795822144, -0.26131066679954529, 0.018732402473688126, -0.10065752267837524, 0.24570322036743164, -0.024898510426282883, -0.13168744742870331, 0.14669910073280334, 0.086943738162517548, -0.04888717457652092, -0.26543527841567993, 0.12474289536476135, -0.15115326642990112, 0.1108875647187233, 0.04730699211359024, 0.40288519859313965, 0.10021639615297318, -0.088377915322780609, -0.19775219261646271, 0.26808592677116394, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 40,30 } };
const ALIGN(16) float tensor_data5[20*40] = { 
  0.092698320746421814, -0.095969103276729584, 0.35668587684631348, 0.37677913904190063, 0.059233173727989197, 0.096883237361907959, 0.2033182829618454, 0.14692163467407227, 0.052867759019136429, -0.1222456619143486, 0.30553886294364929, 0.22041644155979156, -0.25635614991188049, 0.26327776908874512, -0.10946102440357208, 0.24190963804721832, -0.21525612473487854, 0.16053543984889984, -0.084833443164825439, -0.0046329139731824398, 0.17786312103271484, -0.072075754404067993, 0.031708128750324249, 0.10598958283662796, 0.042019937187433243, -0.13062575459480286, 0.012482042424380779, 0.077280528843402863, 0.11199583858251572, -0.25427031517028809, 0.28589275479316711, -0.026779603213071823, -0.014346846379339695, -0.073640301823616028, -0.43522992730140686, 0.019619060680270195, 0.2326202392578125, 0.20488296449184418, 0.17937357723712921, -0.040177460759878159, 
  -0.16578042507171631, 0.10747846215963364, 0.12614572048187256, -0.14074800908565521, -0.1721043735742569, -0.20488595962524414, 0.19563989341259003, 0.18918821215629578, -0.19740435481071472, -0.12920533120632172, 0.0096316272392868996, -0.30671712756156921, 0.26864352822303772, -0.15765553712844849, -0.32610064744949341, 0.29223543405532837, -0.070200808346271515, 0.17278854548931122, -0.13912233710289001, 0.29808503389358521, 0.1327701210975647, 0.0055578164756298065, -0.26749888062477112, 0.18181152641773224, 0.27484890818595886, -0.31365689635276794, -0.1461842954158783, 0.017503304407000542, 0.32236501574516296, 0.13763755559921265, -0.02328759990632534, 0.19041115045547485, 0.19529439508914948, 0.26096808910369873, 0.23638753592967987, -0.31403931975364685, 0.23308762907981873, 0.056916624307632446, -0.29843568801879883, -0.046273410320281982, 
  -0.036914963275194168, 0.020884130150079727, -0.14904065430164337, -0.10952383279800415, -0.12371466308832169, 0.076130717992782593, -0.075228005647659302, -0.035701751708984375, 0.20813345909118652, -0.32529228925704956, -0.14649617671966553, -0.061249658465385437, 0.29773363471031189, -0.081468120217323303, -0.0019223009003326297, 0.027383606880903244, -0.0081822965294122696, 0.0027462500147521496, -0.06833060085773468, -0.13852724432945251, 0.23281286656856537, 0.24950210750102997, 0.24543477594852448, -0.27052262425422668, 0.26085260510444641, -0.13889801502227783, 0.24676486849784851, 0.205361008644104, -0.20572152733802795, 0.096088916063308716, -0.26949873566627502, 0.26720046997070312, 0.02323206327855587, 0.27771091461181641, -0.27181410789489746, -0.20739072561264038, 0.05630338191986084, 0.27242335677146912, -0.17246398329734802, -0.017393322661519051, 
  0.31303727626800537, 0.17780110239982605, -0.083092905580997467, -0.14849297702312469, 0.047097936272621155, 0.28844854235649109, -0.14294342696666718, -0.011590868234634399, -0.045244291424751282, 0.34864223003387451, 0.33160161972045898, -0.20093609392642975, 0.13774608075618744, 0.19808091223239899, 0.12104928493499756, 0.22113972902297974, 0.32167598605155945, 0.22592300176620483, -0.23013056814670563, 0.21982288360595703, -0.12060435116291046, 0.033237993717193604, -0.29229283332824707, 0.031078590080142021, -0.16646184027194977, 0.15313136577606201, -0.2044246643781662, -0.31808376312255859, 0.022934198379516602, -0.076960228383541107, -0.12105128914117813, 0.10926438868045807, -0.37845662236213684, -0.040470641106367111, -0.059858314692974091, -0.1491750180721283, -0.059864342212677002, -0.20331956446170807, -0.31092727184295654, -0.10853327810764313, 
  -0.27512446045875549, -0.38195091485977173, -0.16546864807605743, -0.076750755310058594, -0.39683407545089722, 0.16160663962364197, -0.031483057886362076, 0.066942095756530762, -0.091950170695781708, 0.15776312351226807, -0.35790050029754639, 0.23002204298973083, -0.18034476041793823, 0.20072305202484131, 0.16960746049880981, 0.10511821508407593, -0.043645091354846954, 0.050116263329982758, -0.14604605734348297, 0.22889147698879242, -0.20971184968948364, 0.44475343823432922, -0.065610609948635101, -0.089274145662784576, 0.3187936544418335, -0.14896576106548309, 0.24902468919754028, 0.06076466292142868, 0.048041895031929016, 0.017082568258047104, -0.17387887835502625, -0.16573219001293182, -0.11562380194664001, -0.095126569271087646, 0.28664109110832214, 0.3812008798122406, -0.31769067049026489, 0.29345464706420898, 0.32871538400650024, 0.25844255089759827, 
  -0.17623062431812286, 0.14035297930240631, 0.037788111716508865, 0.027120565995573997, -0.18642880022525787, 0.1791553795337677, -0.03865453228354454, -0.064968794584274292, -0.11943048238754272, -0.13643509149551392, -0.33521786332130432, 0.24629402160644531, 0.013562676496803761, -0.072995245456695557, 0.20635110139846802, -0.33240798115730286, 0.18100965023040771, 0.33784034848213196, -0.2160092294216156, 0.064297698438167572, 0.24994610249996185, -0.078524485230445862, -0.24144519865512848, -0.26806512475013733, -0.0048834108747541904, 0.10010245442390442, -0.11015095561742783, 0.25081801414489746, 0.43429544568061829, 0.11669357866048813, 0.38879123330116272, -0.23506522178649902, 0.20376405119895935, -0.019757043570280075, 0.2405892014503479, 0.15894299745559692, 0.3354499340057373, 0.12203192710876465, 0.085521630942821503, -0.17740802466869354, 
  0.34548112750053406, 0.12618184089660645, 0.21654517948627472, -0.0023379714693874121, 0.042151413857936859, 0.24600900709629059, -0.2168537974357605, 0.024658858776092529, 0.17074349522590637, -0.021801531314849854, -0.01218522060662508, -0.0015540567692369223, 0.21947547793388367, -0.41440856456756592, -0.17634120583534241, -0.17685773968696594, -0.17173230648040771, 0.014778315089643002, 0.035872764885425568, 0.25366899371147156, -0.0051293796859681606, -0.12486216425895691, -0.12026435881853104, 0.20264814794063568, -0.25725504755973816, 0.26353862881660461, 0.25242620706558228, 0.047660250216722488, -0.43002244830131531, -0.033656176179647446, 0.025031529366970062, -0.3237740695476532, 0.053051959723234177, 0.3143879771232605, -0.027385341003537178, 0.058251641690731049, 0.092984355986118317, -0.19854198396205902, 0.18470793962478638, 0.14415420591831207, 
  -0.059037182480096817, 0.087858125567436218, -0.053037706762552261, 0.22885125875473022, 0.29420256614685059, -0.19515787065029144, 0.18991829454898834, -0.27065378427505493, 0.25480583310127258, 0.012332000769674778, 0.01662641204893589, -0.16373765468597412, 0.17850823700428009, -0.31088405847549438, -0.31704792380332947, -0.13563068211078644, 0.37630319595336914, -0.33100128173828125, 0.051416978240013123, 0.32983538508415222, 0.21991093456745148, 0.23631662130355835, -0.1934114396572113, -0.22666122019290924, 0.14570115506649017, -0.30182421207427979, -0.094041161239147186, -0.21370860934257507, 0.44329845905303955, -0.2068202793598175, 0.24242225289344788, 0.18591880798339844, -0.29011759161949158, -0.11858506500720978, 0.42160585522651672, -0.236129030585289, -0.29234796762466431, 0.12934555113315582, -0.15276689827442169, 0.17193658649921417, 
  0.22194920480251312, 0.17405162751674652, 0.21456588804721832, -0.32590359449386597, -0.077100090682506561, 0.19683146476745605, -0.014996332116425037, -0.092878356575965881, -0.25821918249130249, -0.16795824468135834, 0.043688271194696426, 0.097903765738010406, 0.29788726568222046, 0.019941523671150208, 0.15185360610485077, -0.17450186610221863, 0.021686047315597534, -0.38846033811569214, 0.029823470860719681, -0.23584246635437012, -0.31878229975700378, -0.066560149192810059, 0.17356175184249878, 0.2212071418762207, 0.17343688011169434, 0.087377101182937622, -0.042473450303077698, -0.055080212652683258, 0.16038019955158234, 0.05501936748623848, 0.25421947240829468, 0.048495125025510788, -0.27389693260192871, 0.068938568234443665, 0.22265055775642395, 0.26288464665412903, 0.23260697722434998, 0.050866957753896713, -0.25382286310195923, -0.11147774010896683, 
  0.25802275538444519, 0.279804527759552, 0.22184541821479797, -0.040391311049461365, 0.20371092855930328, -0.14177213609218597, -0.23050597310066223, 0.1516362726688385, -0.053086675703525543, 0.0047940900549292564, 0.29877099394798279, -0.22873020172119141, 0.1109248474240303, -0.09649987518787384, 0.15887546539306641, 0.13782225549221039, -0.1169869601726532, -0.36271136999130249, -0.0081025334075093269, -0.16015177965164185, 0.3447050154209137, -0.0071218162775039673, -0.24657486379146576, -0.011724017560482025, -0.071237541735172272, 0.04011409729719162, 0.32483157515525818, 0.13466286659240723, -0.30199253559112549, -0.27677026391029358, 0.1333329826593399, 0.1358477771282196, -0.085684254765510559, -0.24999326467514038, -0.096089929342269897, -0.37824827432632446, 0.19755922257900238, 0.11175903677940369, -0.11822656542062759, 0.087575517594814301, 
  -0.16306038200855255, 0.031209323555231094, 0.049925860017538071, -0.27660253643989563, -0.14761097729206085, 0.12091753631830215, 0.32939556241035461, -0.22335129976272583, -0.076093226671218872, 0.098530218005180359, -0.22350886464118958, 0.070085495710372925, 0.16706205904483795, 0.32629072666168213, 0.28821209073066711, 0.24909089505672455, -0.30673062801361084, -0.18123489618301392, -0.019228287041187286, -0.19925540685653687, 0.10731770098209381, -0.081141524016857147, -0.23518916964530945, 0.15405787527561188, 0.25746601819992065, -0.14193584024906158, 0.28989464044570923, -0.2443232387304306, -0.34535306692123413, 0.21669314801692963, -0.19874995946884155, 0.16262383759021759, 0.009574604220688343, 0.21794508397579193, 0.1419784277677536, 0.061406340450048447, 0.17105349898338318, -0.2450050562620163, 0.18198733031749725, -0.16100642085075378, 
  -0.32455441355705261, 0.21535299718379974, -0.23148022592067719, -0.2999914288520813, 0.0074500413611531258, -0.17246969044208527, 0.06510230153799057, 0.24257984757423401, 0.073105491697788239, -0.14236108958721161, -0.17379306256771088, 0.074643075466156006, 0.033311329782009125, -0.18020962178707123, -0.11630734801292419, -0.049737546592950821, -0.2634357213973999, -0.043404132127761841, 0.14119669795036316, -0.11146750301122665, 0.27053287625312805, 0.065454728901386261, 0.0098583940416574478, -0.27140331268310547, 0.10907374322414398, 0.13002696633338928, -0.048416197299957275, 0.047821603715419769, -0.099868513643741608, -0.25146579742431641, -0.068098470568656921, 0.11904803663492203, 0.048599384725093842, -0.092047177255153656, 0.10443133860826492, -0.040107108652591705, -0.20332829654216766, -0.16665758192539215, 0.088148117065429688, -0.25817432999610901, 
  -0.37274336814880371, 0.24692618846893311, -0.13859342038631439, 0.019520195201039314, -0.18869377672672272, 0.10733121633529663, -0.2582302987575531, -0.18856137990951538, -0.27690732479095459, -0.23874539136886597, 0.18033885955810547, -0.31907546520233154, -0.12741675972938538, 0.15798643231391907, 0.32661592960357666, 0.1878884881734848, 0.27403274178504944, 0.34112581610679626, 0.17190335690975189, 0.25399664044380188, -0.22543846070766449, 0.32752293348312378, 0.14796799421310425, -0.16514085233211517, 0.0026050717569887638, -0.15113531053066254, 0.30673819780349731, 0.17285023629665375, -0.16780826449394226, -0.042279470711946487, -0.26044714450836182, 0.051573142409324646, -0.10089816153049469, 0.32790988683700562, 0.26340484619140625, 0.028742196038365364, -0.097961083054542542, -0.2013237327337265, 0.049636140465736389, -0.195363849401474, 
  -0.040734861046075821, -0.011602099053561687, 0.19187031686306, -0.11058831959962845, 0.2059737890958786, 0.096766211092472076, -0.23788490891456604, -0.1213565319776535, -0.11253756284713745, 0.20306122303009033, 0.24463647603988647, -0.066016212105751038, -0.25411105155944824, 0.0085078524425625801, 0.070242896676063538, 0.27155739068984985, 0.37296324968338013, -0.084549225866794586, 0.18563102185726166, -0.08464069664478302, 0.048718955367803574, -0.038249645382165909, 0.14581631124019623, 0.27152717113494873, 0.014650896191596985, 0.003871195251122117, 0.032725531607866287, 0.29718837141990662, -0.05899650976061821, 0.10114393383264542, 0.19883310794830322, -0.23295603692531586, -0.15439042448997498, -0.081895805895328522, 0.17182113230228424, -0.098566196858882904, -0.067477412521839142, -0.04253871738910675, 0.0094207162037491798, 0.35622859001159668, 
  0.092885464429855347, -0.22766968607902527, 0.20491854846477509, 0.059244830161333084, 0.21421876549720764, 0.14282669126987457, 0.16149628162384033, -0.25719183683395386, 0.25851815938949585, 0.16037321090698242, -0.022713175043463707, -0.25190338492393494, -0.23941639065742493, 0.28873398900032043, -0.2071278989315033, 0.18360112607479095, 0.10359542071819305, 0.34252947568893433, -0.23148234188556671, 0.095852717757225037, -0.074362315237522125, 0.067568555474281311, -0.29236197471618652, 0.1317107230424881, 0.064516417682170868, -0.070191323757171631, -0.098949752748012543, 0.13799069821834564, 0.10916997492313385, -0.039629586040973663, 0.072687841951847076, 0.35093411803245544, -0.31824174523353577, 0.29981130361557007, -0.24424079060554504, 0.14583271741867065, 0.089463569223880768, -0.13210539519786835, 0.25464105606079102, -0.025800224393606186, 
  0.2873958945274353, 0.17225420475006104, -0.2554684579372406, 0.19358323514461517, -0.1762855052947998, 0.22036942839622498, 0.14652496576309204, -0.18316523730754852, 0.18225058913230896, 0.0587124302983284, 0.21570001542568207, -0.040486663579940796, 0.18252889811992645, -0.2862093448638916, -0.15599712729454041, 0.16075985133647919, -0.54500430822372437, 0.33693501353263855, 0.15678438544273376, 0.32481628656387329, -0.23214702308177948, -0.036412078887224197, 0.23466783761978149, -0.22961144149303436, -0.023498421534895897, -0.017770467326045036, 0.2772708535194397, -0.31360414624214172, -0.13964870572090149, 0.18274630606174469, 0.24681417644023895, -0.27703484892845154, 0.33078795671463013, 0.28198301792144775, 0.018643131479620934, -0.3070683479309082, 0.18129569292068481, 0.26671314239501953, -0.11664906144142151, -0.2628948986530304, 
  0.12489451467990875, -0.21538731455802917, 0.20935937762260437, -0.097419239580631256, 0.006030665710568428, 0.10940305888652802, -0.11024393886327744, -0.047773838043212891, -0.059289343655109406, -0.095919638872146606, -0.086261413991451263, -0.27302688360214233, 0.090407960116863251, 0.20162481069564819, 0.22051772475242615, 0.071611478924751282, -0.15500684082508087, -0.096863992512226105, -0.053330846130847931, -0.29016581177711487, 0.29372167587280273, 0.093066036701202393, -0.036220382899045944, 0.15682531893253326, -0.30706334114074707, -0.066445097327232361, 0.17840446531772614, -0.10960905253887177, -0.27064168453216553, 0.31195017695426941, -0.15856771171092987, -0.10200497508049011, 0.23289263248443604, 0.037142828106880188, 0.03684842586517334, 0.051164455711841583, 0.090822875499725342, 0.038618594408035278, -0.0031448605004698038, -0.30366119742393494, 
  0.1904204785823822, 0.11784540861845016, 0.17077518999576569, -0.3316173255443573, -0.1395663321018219, 0.25147154927253723, -0.13203741610050201, 0.13500681519508362, -0.0096133900806307793, 0.16580101847648621, 0.10763083398342133, -0.19069312512874603, 0.21037670969963074, 0.33729878067970276, -0.18026074767112732, -0.075004987418651581, -0.19086584448814392, -0.25110712647438049, 0.23449443280696869, 0.0012184571241959929, 0.14224624633789062, -0.08557562530040741, -0.21370814740657806, -0.19272691011428833, -0.17466926574707031, -0.28626149892807007, -0.23712973296642303, -0.32525429129600525, -0.09217468649148941, 0.1432001143693924, -0.22879771888256073, 0.21726994216442108, 0.081439271569252014, -0.072773933410644531, 0.055440507829189301, 0.15419985353946686, -0.28343495726585388, 0.0042196214199066162, -0.31405892968177795, 0.15476883947849274, 
  0.085124671459197998, 0.16036225855350494, 0.03927014023065567, -0.065576940774917603, 0.017140837386250496, -0.012653287500143051, -0.28898513317108154, 0.2585044801235199, 0.18764597177505493, -0.13203118741512299, -0.27076297998428345, 0.18778654932975769, -0.25755921006202698, -0.42976784706115723, -0.13273607194423676, 0.30266264081001282, 0.08824475109577179, -0.35639718174934387, 0.27014672756195068, 0.34430089592933655, -0.13229122757911682, -0.14665623009204865, 0.091102674603462219, 0.29740294814109802, 0.20411945879459381, 0.31286594271659851, -0.28592950105667114, 0.085077464580535889, 0.38670113682746887, 0.20672258734703064, 0.23814469575881958, 0.020381201058626175, -0.2478349506855011, 0.24329304695129395, 0.13974350690841675, -0.0056663076393306255, -0.06785660982131958, 0.32087263464927673, 0.13934220373630524, 0.21051104366779327, 
  -0.079016491770744324, 0.013038525357842445, 0.2311108261346817, 0.016289170831441879, -0.36105155944824219, 0.12048361450433731, -0.18124818801879883, -0.050696223974227905, 0.27980628609657288, 0.16626347601413727, -0.34381526708602905, 0.055006112903356552, -0.22466292977333069, 0.080744311213493347, -0.30911177396774292, -0.21250069141387939, 0.010192912071943283, 0.28572770953178406, -0.13151605427265167, 0.24160368740558624, 0.060264751315116882, -0.28410139679908752, 0.20905971527099609, 0.3763461709022522, -0.087148211896419525, -0.098269425332546234, 0.021649869158864021, 0.23130036890506744, -0.34748408198356628, 0.27603870630264282, -0.1861119270324707, 0.21983957290649414, 0.14262242615222931, 0.017822127789258957, 0.22870525717735291, 0.17276549339294434, 0.46385675668716431, 0.30358889698982239, -0.16402627527713776, -0.047149691730737686, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 20,40 } };
const ALIGN(16) float tensor_data6[5*20] = { 
  0.3457430899143219, -0.24172352254390717, -0.26315656304359436, 0.39809343218803406, -0.21783193945884705, -0.45095688104629517, 0.023733673617243767, -0.39124879240989685, 0.25110498070716858, 0.14260445535182953, 0.085272923111915588, -0.28036046028137207, -0.37614575028419495, 0.3213561475276947, -0.13941727578639984, -0.54001623392105103, 0.13795644044876099, -0.0943169966340065, 0.26209121942520142, 0.20304754376411438, 
  0.26573273539543152, 0.37953254580497742, -0.0093243597075343132, -0.063407182693481445, -0.43347892165184021, 0.68803906440734863, -0.037439804524183273, 0.24933056533336639, 0.38846653699874878, 0.17149180173873901, -0.64291906356811523, -0.17228539288043976, 0.26345154643058777, 0.44867226481437683, -0.43038460612297058, -0.014766945503652096, -0.34637391567230225, 0.21613956987857819, 0.33087047934532166, -0.055277090519666672, 
  -0.59596520662307739, -0.18764413893222809, -0.19734777510166168, -0.434835284948349, -0.3278476893901825, 0.76905882358551025, 0.41012638807296753, -0.037987794727087021, 0.15432259440422058, -0.34782695770263672, 0.34984663128852844, 0.14516495168209076, 0.52912235260009766, -0.029727237299084663, -0.50306499004364014, 0.43449637293815613, 0.43320539593696594, -0.31960776448249817, 0.023909604176878929, 0.43206867575645447, 
  0.059305835515260696, 0.6234363317489624, -0.43665453791618347, 0.43388396501541138, -0.083229154348373413, -0.59447968006134033, -0.37040618062019348, -0.21278505027294159, -0.1334434449672699, -0.2070697695016861, 0.0016810469096526504, 0.30497124791145325, 0.47791388630867004, 0.22731159627437592, 0.19981150329113007, 0.26932361721992493, 0.31844210624694824, -0.29888454079627991, -0.51152855157852173, -0.42533719539642334, 
  0.29390367865562439, -0.4762294590473175, -0.42115816473960876, 0.062103144824504852, -0.76326644420623779, -0.055117655545473099, 0.43246835470199585, -0.54678827524185181, -0.005691923201084137, 0.3808104395866394, 0.13769668340682983, 0.43603429198265076, -0.28010845184326172, 0.12440242618322372, -0.482045978307724, 0.5115731954574585, -0.39330559968948364, 0.091134257614612579, -0.28448015451431274, 0.15349707007408142, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 5,20 } };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,40 } };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,20 } };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,5 } };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,5 } };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,4,2 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,5,1 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,6,3 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 160), (TfLiteIntArray*)&g0::tensor_dimension0, 120, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 80, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 160, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 20, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 4800, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3200, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 400, },
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension7, 160, },
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 160), (TfLiteIntArray*)&g0::tensor_dimension8, 80, },
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 32), (TfLiteIntArray*)&g0::tensor_dimension9, 20, },
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension10, 20, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 11, };
const size_t tflNodes_subgraph_index[] = {0, 4, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  10, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = kTfLiteFloat32;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization.type = kTfLiteNoQuantization;

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = kTfLiteFloat32;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_18_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_18_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_18_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_18_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_18_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
